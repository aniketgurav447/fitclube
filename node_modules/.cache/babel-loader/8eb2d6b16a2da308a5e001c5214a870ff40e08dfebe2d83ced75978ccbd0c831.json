{"ast":null,"code":"import { existsSync, open, read, closeSync, close } from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport { TextEncoder, TextDecoder } from 'util';\nimport { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { connect, TLSSocket, createSecureContext } from 'tls';\n\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\nconst OPERATORS = new Map([['\"', '\"'], ['(', ')'], ['<', '>'], [',', ''],\n// Groups are ended by semicolons\n[':', ';'],\n// Semicolons are not a legal delimiter per the RFC2822 grammar other\n// than for terminating a group, but they are also not valid for any\n// other use in this context.  Given that some mail clients have\n// historically allowed the semicolon as a delimiter equivalent to the\n// comma in their UI, it makes sense to treat them the same as a comma\n// when used outside of a group.\n[';', '']]);\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\nfunction tokenizeAddress() {\n  let address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var _a, _b;\n  const tokens = [];\n  let token = undefined;\n  let operator = undefined;\n  for (const character of address.toString()) {\n    if (((_a = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _a !== void 0 ? _a : 0) > 0 && character === operator) {\n      tokens.push({\n        type: 'operator',\n        value: character\n      });\n      token = undefined;\n      operator = undefined;\n    } else if (((_b = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _b !== void 0 ? _b : 0) === 0 && OPERATORS.has(character)) {\n      tokens.push({\n        type: 'operator',\n        value: character\n      });\n      token = undefined;\n      operator = OPERATORS.get(character);\n    } else {\n      if (token == null) {\n        token = {\n          type: 'text',\n          value: character\n        };\n        tokens.push(token);\n      } else {\n        token.value += character;\n      }\n    }\n  }\n  return tokens.map(x => {\n    x.value = x.value.trim();\n    return x;\n  }).filter(x => x.value.length > 0);\n}\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\nfunction convertAddressTokens(tokens) {\n  const addressObjects = [];\n  const groups = [];\n  let addresses = [];\n  let comments = [];\n  let texts = [];\n  let state = 'text';\n  let isGroup = false;\n  function handleToken(token) {\n    if (token.type === 'operator') {\n      switch (token.value) {\n        case '<':\n          state = 'address';\n          break;\n        case '(':\n          state = 'comment';\n          break;\n        case ':':\n          state = 'group';\n          isGroup = true;\n          break;\n        default:\n          state = 'text';\n          break;\n      }\n    } else if (token.value.length > 0) {\n      switch (state) {\n        case 'address':\n          addresses.push(token.value);\n          break;\n        case 'comment':\n          comments.push(token.value);\n          break;\n        case 'group':\n          groups.push(token.value);\n          break;\n        default:\n          texts.push(token.value);\n          break;\n      }\n    }\n  }\n  // Filter out <addresses>, (comments) and regular text\n  for (const token of tokens) {\n    handleToken(token);\n  }\n  // If there is no text but a comment, replace the two\n  if (texts.length === 0 && comments.length > 0) {\n    texts = [...comments];\n    comments = [];\n  }\n  // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n  if (isGroup) {\n    addressObjects.push({\n      name: texts.length === 0 ? undefined : texts.join(' '),\n      group: groups.length > 0 ? addressparser(groups.join(',')) : []\n    });\n  } else {\n    // If no address was found, try to detect one from regular text\n    if (addresses.length === 0 && texts.length > 0) {\n      for (let i = texts.length - 1; i >= 0; i--) {\n        if (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n          addresses = texts.splice(i, 1);\n          break;\n        }\n      }\n      // still no address\n      if (addresses.length === 0) {\n        for (let i = texts.length - 1; i >= 0; i--) {\n          texts[i] = texts[i].replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, address => {\n            if (addresses.length === 0) {\n              addresses = [address.trim()];\n              return ' ';\n            } else {\n              return address;\n            }\n          }).trim();\n          if (addresses.length > 0) {\n            break;\n          }\n        }\n      }\n    }\n    // If there's still is no text but a comment exixts, replace the two\n    if (texts.length === 0 && comments.length > 0) {\n      texts = [...comments];\n      comments = [];\n    }\n    // Keep only the first address occurence, push others to regular text\n    if (addresses.length > 1) {\n      texts = [...texts, ...addresses.splice(1)];\n    }\n    if (addresses.length === 0 && isGroup) {\n      return [];\n    } else {\n      // Join values with spaces\n      let address = addresses.join(' ');\n      let name = texts.length === 0 ? address : texts.join(' ');\n      if (address === name) {\n        if (address.match(/@/)) {\n          name = '';\n        } else {\n          address = '';\n        }\n      }\n      addressObjects.push({\n        address,\n        name\n      });\n    }\n  }\n  return addressObjects;\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\nfunction addressparser(address) {\n  const addresses = [];\n  let tokens = [];\n  for (const token of tokenizeAddress(address)) {\n    if (token.type === 'operator' && (token.value === ',' || token.value === ';')) {\n      if (tokens.length > 0) {\n        addresses.push(...convertAddressTokens(tokens));\n      }\n      tokens = [];\n    } else {\n      tokens.push(token);\n    }\n  }\n  if (tokens.length > 0) {\n    addresses.push(...convertAddressTokens(tokens));\n  }\n  return addresses;\n}\n\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\nfunction getRFC2822Date() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  let useUtc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (useUtc) {\n    return getRFC2822DateUTC(date);\n  }\n  const dates = date.toString().replace('GMT', '').replace(/\\s\\(.*\\)$/, '').split(' ');\n  dates[0] = dates[0] + ',';\n  const day = dates[1];\n  dates[1] = dates[2];\n  dates[2] = day;\n  return dates.join(' ');\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\nfunction getRFC2822DateUTC() {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  const dates = date.toUTCString().split(' ');\n  dates.pop(); // remove timezone\n  dates.push('+0000');\n  return dates.join(' ');\n}\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\nconst rfc2822re = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\nfunction isRFC2822Date(date) {\n  return rfc2822re.test(date);\n}\n\n// adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\nconst encoder = new TextEncoder();\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\nconst RANGES = [[0x09], [0x0a], [0x0d], [0x20, 0x3c], [0x3e, 0x7e] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\n\nconst LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\nfunction tripletToBase64(num) {\n  return LOOKUP[num >> 18 & 0x3f] + LOOKUP[num >> 12 & 0x3f] + LOOKUP[num >> 6 & 0x3f] + LOOKUP[num & 0x3f];\n}\nfunction encodeChunk(uint8, start, end) {\n  let output = '';\n  for (let i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n  }\n  return output;\n}\nfunction encodeBase64(data) {\n  const len = data.length;\n  const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  let output = '';\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n  }\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    const tmp = data[len - 1];\n    output += LOOKUP[tmp >> 2];\n    output += LOOKUP[tmp << 4 & 0x3f];\n    output += '==';\n  } else if (extraBytes === 2) {\n    const tmp = (data[len - 2] << 8) + data[len - 1];\n    output += LOOKUP[tmp >> 10];\n    output += LOOKUP[tmp >> 4 & 0x3f];\n    output += LOOKUP[tmp << 2 & 0x3f];\n    output += '=';\n  }\n  return output;\n}\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\nfunction splitMimeEncodedString(str) {\n  let maxlen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n  const minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n  const maxWordLength = Math.max(maxlen, minWordLength);\n  const lines = [];\n  while (str.length) {\n    let curLine = str.substr(0, maxWordLength);\n    const match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n    if (match) {\n      curLine = curLine.substr(0, match.index);\n    }\n    let done = false;\n    while (!done) {\n      let chr;\n      done = true;\n      const match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n      if (match) {\n        chr = parseInt(match[1], 16);\n        // invalid sequence, move one char back anc recheck\n        if (chr < 0xc2 && chr > 0x7f) {\n          curLine = curLine.substr(0, curLine.length - 3);\n          done = false;\n        }\n      }\n    }\n    if (curLine.length) {\n      lines.push(curLine);\n    }\n    str = str.substr(curLine.length);\n  }\n  return lines;\n}\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\nfunction checkRanges(nr) {\n  return RANGES.reduce((val, range) => val || range.length === 1 && nr === range[0] || range.length === 2 && nr >= range[0] && nr <= range[1], false);\n}\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\nfunction mimeEncode() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  const decoder = new TextDecoder(encoding);\n  const buffer = typeof data === 'string' ? encoder.encode(data) : encoder.encode(decoder.decode(data));\n  return buffer.reduce((aggregate, ord, index) => checkRanges(ord) && !((ord === 0x20 || ord === 0x09) && (index === buffer.length - 1 || buffer[index + 1] === 0x0a || buffer[index + 1] === 0x0d)) ?\n  // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n  aggregate + String.fromCharCode(ord) : `${aggregate}=${ord < 0x10 ? '0' : ''}${ord.toString(16).toUpperCase()}`, '');\n}\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\nfunction mimeWordEncode(data) {\n  let mimeWordEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Q';\n  let encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'utf-8';\n  let parts = [];\n  const decoder = new TextDecoder(encoding);\n  const str = typeof data === 'string' ? data : decoder.decode(data);\n  if (mimeWordEncoding === 'Q') {\n    const encodedStr = mimeEncode(str, encoding).replace(/[^a-z0-9!*+\\-/=]/gi, chr => chr === ' ' ? '_' : '=' + (chr.charCodeAt(0) < 0x10 ? '0' : '') + chr.charCodeAt(0).toString(16).toUpperCase());\n    parts = encodedStr.length < MAX_MIME_WORD_LENGTH ? [encodedStr] : splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n  } else {\n    // Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n    let j = 0;\n    let i = 0;\n    while (i < str.length) {\n      if (encoder.encode(str.substring(j, i)).length > MAX_B64_MIME_WORD_BYTE_LENGTH) {\n        // we went one character too far, substring at the char before\n        parts.push(str.substring(j, i - 1));\n        j = i - 1;\n      } else {\n        i++;\n      }\n    }\n    // add the remainder of the string\n    str.substring(j) && parts.push(str.substring(j));\n    parts = parts.map(x => encoder.encode(x)).map(x => encodeBase64(x));\n  }\n  return parts.map(p => `=?UTF-8?${mimeWordEncoding}?${p}?= `).join('').trim();\n}\nconst CRLF$1 = '\\r\\n';\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\nconst MIMECHUNK = 76;\n/**\n * meets both base64 and mime divisibility\n */\nconst MIME64CHUNK = MIMECHUNK * 6;\n/**\n * size of the message stream buffer\n */\nconst BUFFERSIZE = MIMECHUNK * 24 * 7;\nlet counter = 0;\nfunction generateBoundary() {\n  let text = '';\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n  for (let i = 0; i < 69; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nfunction convertPersonToAddress(person) {\n  return addressparser(person).map(_ref => {\n    let {\n      name,\n      address\n    } = _ref;\n    return name ? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>` : address;\n  }).join(', ');\n}\nfunction convertDashDelimitedTextToSnakeCase(text) {\n  return text.toLowerCase().replace(/^(.)|-(.)/g, match => match.toUpperCase());\n}\nclass Message {\n  /**\n   * Construct an rfc2822-compliant message object.\n   *\n   * Special notes:\n   * - The `from` field is required.\n   * - At least one `to`, `cc`, or `bcc` header is also required.\n   * - You can also add whatever other headers you want.\n   *\n   * @see https://tools.ietf.org/html/rfc2822\n   * @param {Partial<MessageHeaders>} headers Message headers\n   */\n  constructor(headers) {\n    this.attachments = [];\n    this.header = {\n      'message-id': `<${new Date().getTime()}.${counter++}.${process.pid}@${hostname()}>`,\n      date: getRFC2822Date()\n    };\n    this.content = 'text/plain; charset=utf-8';\n    this.alternative = null;\n    for (const header in headers) {\n      // allow user to override default content-type to override charset or send a single non-text message\n      if (/^content-type$/i.test(header)) {\n        this.content = headers[header];\n      } else if (header === 'text') {\n        this.text = headers[header];\n      } else if (header === 'attachment' && typeof headers[header] === 'object') {\n        const attachment = headers[header];\n        if (Array.isArray(attachment)) {\n          for (let i = 0; i < attachment.length; i++) {\n            this.attach(attachment[i]);\n          }\n        } else if (attachment != null) {\n          this.attach(attachment);\n        }\n      } else if (header === 'subject') {\n        this.header.subject = mimeWordEncode(headers.subject);\n      } else if (/^(cc|bcc|to|from)/i.test(header)) {\n        this.header[header.toLowerCase()] = convertPersonToAddress(headers[header]);\n      } else {\n        // allow any headers the user wants to set??\n        this.header[header.toLowerCase()] = headers[header];\n      }\n    }\n  }\n  /**\n   * Attach a file to the message.\n   *\n   * Can be called multiple times, each adding a new attachment.\n   *\n   * @public\n   * @param {MessageAttachment} options attachment options\n   * @returns {Message} the current instance for chaining\n   */\n  attach(options) {\n    // sender can specify an attachment as an alternative\n    if (options.alternative) {\n      this.alternative = options;\n      this.alternative.charset = options.charset || 'utf-8';\n      this.alternative.type = options.type || 'text/html';\n      this.alternative.inline = true;\n    } else {\n      this.attachments.push(options);\n    }\n    return this;\n  }\n  /**\n   * @public\n   * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n   */\n  checkValidity() {\n    if (typeof this.header.from !== 'string' && Array.isArray(this.header.from) === false) {\n      return {\n        isValid: false,\n        validationError: 'Message must have a `from` header'\n      };\n    }\n    if (typeof this.header.to !== 'string' && Array.isArray(this.header.to) === false && typeof this.header.cc !== 'string' && Array.isArray(this.header.cc) === false && typeof this.header.bcc !== 'string' && Array.isArray(this.header.bcc) === false) {\n      return {\n        isValid: false,\n        validationError: 'Message must have at least one `to`, `cc`, or `bcc` header'\n      };\n    }\n    if (this.attachments.length > 0) {\n      const failed = [];\n      this.attachments.forEach(attachment => {\n        if (attachment.path) {\n          if (existsSync(attachment.path) === false) {\n            failed.push(`${attachment.path} does not exist`);\n          }\n        } else if (attachment.stream) {\n          if (!attachment.stream.readable) {\n            failed.push('attachment stream is not readable');\n          }\n        } else if (!attachment.data) {\n          failed.push('attachment has no data associated with it');\n        }\n      });\n      return {\n        isValid: failed.length === 0,\n        validationError: failed.join(', ')\n      };\n    }\n    return {\n      isValid: true,\n      validationError: undefined\n    };\n  }\n  /**\n   * @public\n   * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n   * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n   * @returns {void}\n   */\n  valid(callback) {\n    const {\n      isValid,\n      validationError\n    } = this.checkValidity();\n    callback(isValid, validationError);\n  }\n  /**\n   * @public\n   * @returns {MessageStream} a stream of the current message\n   */\n  stream() {\n    return new MessageStream(this);\n  }\n  /**\n   * @public\n   * @param {function(Error, string): void} callback the function to call with the error and buffer\n   * @returns {void}\n   */\n  read(callback) {\n    let buffer = '';\n    const str = this.stream();\n    str.on('data', data => buffer += data);\n    str.on('end', err => callback(err, buffer));\n    str.on('error', err => callback(err, buffer));\n  }\n  readAsync() {\n    return new Promise((resolve, reject) => {\n      this.read((err, buffer) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          resolve(buffer);\n        }\n      });\n    });\n  }\n}\nclass MessageStream extends Stream {\n  /**\n   * @param {Message} message the message to stream\n   */\n  constructor(message) {\n    super();\n    this.message = message;\n    this.readable = true;\n    this.paused = false;\n    this.buffer = Buffer.alloc(MIMECHUNK * 24 * 7);\n    this.bufferIndex = 0;\n    /**\n     * @param {string} [data] the data to output\n     * @param {Function} [callback] the function\n     * @param {any[]} [args] array of arguments to pass to the callback\n     * @returns {void}\n     */\n    const output = data => {\n      // can we buffer the data?\n      if (this.buffer != null) {\n        const bytes = Buffer.byteLength(data);\n        if (bytes + this.bufferIndex < this.buffer.length) {\n          this.buffer.write(data, this.bufferIndex);\n          this.bufferIndex += bytes;\n        }\n        // we can't buffer the data, so ship it out!\n        else if (bytes > this.buffer.length) {\n          if (this.bufferIndex) {\n            this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n            this.bufferIndex = 0;\n          }\n          const loops = Math.ceil(data.length / this.buffer.length);\n          let loop = 0;\n          while (loop < loops) {\n            this.emit('data', data.substring(this.buffer.length * loop, this.buffer.length * (loop + 1)));\n            loop++;\n          }\n        } // we need to clean out the buffer, it is getting full\n        else {\n          if (!this.paused) {\n            this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n            this.buffer.write(data, 0);\n            this.bufferIndex = bytes;\n          } else {\n            // we can't empty out the buffer, so let's wait till we resume before adding to it\n            this.once('resume', () => output(data));\n          }\n        }\n      }\n    };\n    /**\n     * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n     * @returns {void}\n     */\n    const outputAttachmentHeaders = attachment => {\n      let data = [];\n      const headers = {\n        'content-type': attachment.type + (attachment.charset ? `; charset=${attachment.charset}` : '') + (attachment.method ? `; method=${attachment.method}` : ''),\n        'content-transfer-encoding': 'base64',\n        'content-disposition': attachment.inline ? 'inline' : `attachment; filename=\"${mimeWordEncode(attachment.name)}\"`\n      };\n      // allow sender to override default headers\n      if (attachment.headers != null) {\n        for (const header in attachment.headers) {\n          headers[header.toLowerCase()] = attachment.headers[header];\n        }\n      }\n      for (const header in headers) {\n        data = data.concat([convertDashDelimitedTextToSnakeCase(header), ': ', headers[header], CRLF$1]);\n      }\n      output(data.concat([CRLF$1]).join(''));\n    };\n    /**\n     * @param {string} data the data to output as base64\n     * @param {function(): void} [callback] the function to call after output is finished\n     * @returns {void}\n     */\n    const outputBase64 = (data, callback) => {\n      const loops = Math.ceil(data.length / MIMECHUNK);\n      let loop = 0;\n      while (loop < loops) {\n        output(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF$1);\n        loop++;\n      }\n      if (callback) {\n        callback();\n      }\n    };\n    const outputFile = (attachment, next) => {\n      var _a;\n      const chunk = MIME64CHUNK * 16;\n      const buffer = Buffer.alloc(chunk);\n      const inputEncoding = ((_a = attachment === null || attachment === void 0 ? void 0 : attachment.headers) === null || _a === void 0 ? void 0 : _a['content-transfer-encoding']) || 'base64';\n      const encoding = inputEncoding === '7bit' ? 'ascii' : inputEncoding === '8bit' ? 'binary' : inputEncoding;\n      /**\n       * @param {Error} err the error to emit\n       * @param {number} fd the file descriptor\n       * @returns {void}\n       */\n      const opened = (err, fd) => {\n        if (err) {\n          this.emit('error', err);\n          return;\n        }\n        const readBytes = (err, bytes) => {\n          if (err || this.readable === false) {\n            this.emit('error', err || new Error('message stream was interrupted somehow!'));\n            return;\n          }\n          // guaranteed to be encoded without padding unless it is our last read\n          outputBase64(buffer.toString(encoding, 0, bytes), () => {\n            if (bytes == chunk) {\n              // we read a full chunk, there might be more\n              read(fd, buffer, 0, chunk, null, readBytes);\n            } // that was the last chunk, we are done reading the file\n            else {\n              this.removeListener('error', closeSync);\n              close(fd, next);\n            }\n          });\n        };\n        read(fd, buffer, 0, chunk, null, readBytes);\n        this.once('error', closeSync);\n      };\n      open(attachment.path, 'r', opened);\n    };\n    /**\n     * @param {MessageAttachment} attachment the metadata to use as headers\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n    const outputStream = (attachment, callback) => {\n      const {\n        stream\n      } = attachment;\n      if (stream === null || stream === void 0 ? void 0 : stream.readable) {\n        let previous = Buffer.alloc(0);\n        stream.resume();\n        stream.on('end', () => {\n          outputBase64(previous.toString('base64'), callback);\n          this.removeListener('pause', stream.pause);\n          this.removeListener('resume', stream.resume);\n          this.removeListener('error', stream.resume);\n        });\n        stream.on('data', buff => {\n          // do we have bytes from a previous stream data event?\n          let buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n          if (previous.byteLength > 0) {\n            buffer = Buffer.concat([previous, buffer]);\n          }\n          const padded = buffer.length % MIME64CHUNK;\n          previous = Buffer.alloc(padded);\n          // encode as much of the buffer to base64 without empty bytes\n          if (padded > 0) {\n            // copy dangling bytes into previous buffer\n            buffer.copy(previous, 0, buffer.length - padded);\n          }\n          outputBase64(buffer.toString('base64', 0, buffer.length - padded));\n        });\n        this.on('pause', stream.pause);\n        this.on('resume', stream.resume);\n        this.on('error', stream.resume);\n      } else {\n        this.emit('error', {\n          message: 'stream not readable'\n        });\n      }\n    };\n    const outputAttachment = (attachment, callback) => {\n      const build = attachment.path ? outputFile : attachment.stream ? outputStream : outputData;\n      outputAttachmentHeaders(attachment);\n      build(attachment, callback);\n    };\n    /**\n     * @param {string} boundary the boundary text between outputs\n     * @param {MessageAttachment[]} list the list of potential messages to output\n     * @param {number} index the index of the list item to output\n     * @param {function(): void} callback the function to call if index is greater than upper bound\n     * @returns {void}\n     */\n    const outputMessage = (boundary, list, index, callback) => {\n      if (index < list.length) {\n        output(`--${boundary}${CRLF$1}`);\n        if (list[index].related) {\n          outputRelated(list[index], () => outputMessage(boundary, list, index + 1, callback));\n        } else {\n          outputAttachment(list[index], () => outputMessage(boundary, list, index + 1, callback));\n        }\n      } else {\n        output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n        callback();\n      }\n    };\n    const outputMixed = () => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      if (this.message.alternative == null) {\n        outputText(this.message);\n        outputMessage(boundary, this.message.attachments, 0, close$1);\n      } else {\n        outputAlternative(\n        // typescript bug; should narrow to { alternative: MessageAttachment }\n        this.message, () => outputMessage(boundary, this.message.attachments, 0, close$1));\n      }\n    };\n    /**\n     * @param {MessageAttachment} attachment the metadata to use as headers\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n    const outputData = (attachment, callback) => {\n      var _a, _b;\n      outputBase64(attachment.encoded ? (_a = attachment.data) !== null && _a !== void 0 ? _a : '' : Buffer.from((_b = attachment.data) !== null && _b !== void 0 ? _b : '').toString('base64'), callback);\n    };\n    /**\n     * @param {Message} message the message to output\n     * @returns {void}\n     */\n    const outputText = message => {\n      let data = [];\n      data = data.concat(['Content-Type:', message.content, CRLF$1, 'Content-Transfer-Encoding: 7bit', CRLF$1]);\n      data = data.concat(['Content-Disposition: inline', CRLF$1, CRLF$1]);\n      data = data.concat([message.text || '', CRLF$1, CRLF$1]);\n      output(data.join(''));\n    };\n    /**\n     * @param {MessageAttachment} message the message to output\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n    const outputRelated = (message, callback) => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      outputAttachment(message, () => {\n        var _a;\n        outputMessage(boundary, (_a = message.related) !== null && _a !== void 0 ? _a : [], 0, () => {\n          output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n          callback();\n        });\n      });\n    };\n    /**\n     * @param {Message} message the message to output\n     * @param {function(): void} callback the function to call after output is finished\n     * @returns {void}\n     */\n    const outputAlternative = (message, callback) => {\n      const boundary = generateBoundary();\n      output(`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n      outputText(message);\n      output(`--${boundary}${CRLF$1}`);\n      /**\n       * @returns {void}\n       */\n      const finish = () => {\n        output([CRLF$1, '--', boundary, '--', CRLF$1, CRLF$1].join(''));\n        callback();\n      };\n      if (message.alternative.related) {\n        outputRelated(message.alternative, finish);\n      } else {\n        outputAttachment(message.alternative, finish);\n      }\n    };\n    const close$1 = err => {\n      var _a, _b;\n      if (err) {\n        this.emit('error', err);\n      } else {\n        this.emit('data', (_b = (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.toString('utf-8', 0, this.bufferIndex)) !== null && _b !== void 0 ? _b : '');\n        this.emit('end');\n      }\n      this.buffer = null;\n      this.bufferIndex = 0;\n      this.readable = false;\n      this.removeAllListeners('resume');\n      this.removeAllListeners('pause');\n      this.removeAllListeners('error');\n      this.removeAllListeners('data');\n      this.removeAllListeners('end');\n    };\n    /**\n     * @returns {void}\n     */\n    const outputHeaderData = () => {\n      if (this.message.attachments.length || this.message.alternative) {\n        output(`MIME-Version: 1.0${CRLF$1}`);\n        outputMixed();\n      } // you only have a text message!\n      else {\n        outputText(this.message);\n        close$1();\n      }\n    };\n    /**\n     * @returns {void}\n     */\n    const outputHeader = () => {\n      let data = [];\n      for (const header in this.message.header) {\n        // do not output BCC in the headers (regex) nor custom Object.prototype functions...\n        if (!/bcc/i.test(header) && Object.prototype.hasOwnProperty.call(this.message.header, header)) {\n          data = data.concat([convertDashDelimitedTextToSnakeCase(header), ': ', this.message.header[header], CRLF$1]);\n        }\n      }\n      output(data.join(''));\n      outputHeaderData();\n    };\n    this.once('destroy', close$1);\n    process.nextTick(outputHeader);\n  }\n  /**\n   * @public\n   * pause the stream\n   * @returns {void}\n   */\n  pause() {\n    this.paused = true;\n    this.emit('pause');\n  }\n  /**\n   * @public\n   * resume the stream\n   * @returns {void}\n   */\n  resume() {\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * @public\n   * destroy the stream\n   * @returns {void}\n   */\n  destroy() {\n    this.emit('destroy', this.bufferIndex > 0 ? {\n      message: 'message stream destroyed'\n    } : null);\n  }\n  /**\n   * @public\n   * destroy the stream at first opportunity\n   * @returns {void}\n   */\n  destroySoon() {\n    this.emit('destroy');\n  }\n}\n\n/**\n * @readonly\n * @enum\n */\nconst SMTPErrorStates = {\n  COULDNOTCONNECT: 1,\n  BADRESPONSE: 2,\n  AUTHFAILED: 3,\n  TIMEDOUT: 4,\n  ERROR: 5,\n  NOCONNECTION: 6,\n  AUTHNOTSUPPORTED: 7,\n  CONNECTIONCLOSED: 8,\n  CONNECTIONENDED: 9,\n  CONNECTIONAUTH: 10\n};\nclass SMTPError extends Error {\n  /**\n   * @protected\n   * @param {string} message error message\n   */\n  constructor(message) {\n    super(message);\n    this.code = null;\n    this.smtp = null;\n    this.previous = null;\n  }\n  /**\n   *\n   * @param {string} message error message\n   * @param {number} code smtp error state\n   * @param {Error | null} error previous error\n   * @param {unknown} smtp arbitrary data\n   * @returns {SMTPError} error\n   */\n  static create(message, code, error, smtp) {\n    const msg = (error === null || error === void 0 ? void 0 : error.message) ? `${message} (${error.message})` : message;\n    const err = new SMTPError(msg);\n    err.code = code;\n    err.smtp = smtp;\n    if (error) {\n      err.previous = error;\n    }\n    return err;\n  }\n}\nclass SMTPResponseMonitor {\n  constructor(stream, timeout, onerror) {\n    let buffer = '';\n    const notify = () => {\n      var _a, _b;\n      if (buffer.length) {\n        // parse buffer for response codes\n        const line = buffer.replace('\\r', '');\n        if (!((_b = (_a = line.trim().split(/\\n/).pop()) === null || _a === void 0 ? void 0 : _a.match(/^(\\d{3})\\s/)) !== null && _b !== void 0 ? _b : false)) {\n          return;\n        }\n        const match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n        const data = match !== null ? {\n          code: match[1],\n          message: match[2],\n          data: line\n        } : {\n          code: -1,\n          data: line\n        };\n        stream.emit('response', null, data);\n        buffer = '';\n      }\n    };\n    const error = err => {\n      stream.emit('response', SMTPError.create('connection encountered an error', SMTPErrorStates.ERROR, err));\n    };\n    const timedout = err => {\n      stream.end();\n      stream.emit('response', SMTPError.create('timedout while connecting to smtp server', SMTPErrorStates.TIMEDOUT, err));\n    };\n    const watch = data => {\n      if (data !== null) {\n        buffer += data.toString();\n        notify();\n      }\n    };\n    const close = err => {\n      stream.emit('response', SMTPError.create('connection has closed', SMTPErrorStates.CONNECTIONCLOSED, err));\n    };\n    const end = err => {\n      stream.emit('response', SMTPError.create('connection has ended', SMTPErrorStates.CONNECTIONENDED, err));\n    };\n    this.stop = err => {\n      stream.removeAllListeners('response');\n      stream.removeListener('data', watch);\n      stream.removeListener('end', end);\n      stream.removeListener('close', close);\n      stream.removeListener('error', error);\n      if (err != null && typeof onerror === 'function') {\n        onerror(err);\n      }\n    };\n    stream.on('data', watch);\n    stream.on('end', end);\n    stream.on('close', close);\n    stream.on('error', error);\n    stream.setTimeout(timeout, timedout);\n  }\n}\n\n/**\n * @readonly\n * @enum\n */\nconst AUTH_METHODS = {\n  PLAIN: 'PLAIN',\n  'CRAM-MD5': 'CRAM-MD5',\n  LOGIN: 'LOGIN',\n  XOAUTH2: 'XOAUTH2'\n};\n/**\n * @readonly\n * @enum\n */\nconst SMTPState = {\n  NOTCONNECTED: 0,\n  CONNECTING: 1,\n  CONNECTED: 2\n};\nconst DEFAULT_TIMEOUT = 5000;\nconst SMTP_PORT = 25;\nconst SMTP_SSL_PORT = 465;\nconst SMTP_TLS_PORT = 587;\nconst CRLF = '\\r\\n';\nconst GREYLIST_DELAY = 300;\nlet DEBUG = 0;\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\nconst log = function () {\n  if (DEBUG === 1) {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.forEach(d => console.log(typeof d === 'object' ? d instanceof Error ? d.message : JSON.stringify(d) : d));\n  }\n};\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\nconst caller = function (callback) {\n  if (typeof callback === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    callback(...args);\n  }\n};\nclass SMTPConnection extends EventEmitter {\n  /**\n   * SMTP class written using python's (2.7) smtplib.py as a base.\n   *\n   * To target a Message Transfer Agent (MTA), omit all options.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   */\n  constructor() {\n    let {\n      timeout,\n      host,\n      user,\n      password,\n      domain,\n      port,\n      ssl,\n      tls,\n      logger,\n      authentication\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    super();\n    this.timeout = DEFAULT_TIMEOUT;\n    this.log = log;\n    this.authentication = [AUTH_METHODS['CRAM-MD5'], AUTH_METHODS.LOGIN, AUTH_METHODS.PLAIN, AUTH_METHODS.XOAUTH2];\n    this._state = SMTPState.NOTCONNECTED;\n    this._secure = false;\n    this.loggedin = false;\n    this.sock = null;\n    this.features = null;\n    this.monitor = null;\n    this.domain = hostname();\n    this.host = 'localhost';\n    this.ssl = false;\n    this.tls = false;\n    this.greylistResponseTracker = new WeakSet();\n    if (Array.isArray(authentication)) {\n      this.authentication = authentication;\n    }\n    if (typeof timeout === 'number') {\n      this.timeout = timeout;\n    }\n    if (typeof domain === 'string') {\n      this.domain = domain;\n    }\n    if (typeof host === 'string') {\n      this.host = host;\n    }\n    if (ssl != null && (typeof ssl === 'boolean' || typeof ssl === 'object' && Array.isArray(ssl) === false)) {\n      this.ssl = ssl;\n    }\n    if (tls != null && (typeof tls === 'boolean' || typeof tls === 'object' && Array.isArray(tls) === false)) {\n      this.tls = tls;\n    }\n    this.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n    this.loggedin = user && password ? false : true;\n    if (!user && ((_a = password === null || password === void 0 ? void 0 : password.length) !== null && _a !== void 0 ? _a : 0) > 0) {\n      throw new Error('`password` cannot be set without `user`');\n    }\n    // keep these strings hidden when quicky debugging/logging\n    this.user = () => user;\n    this.password = () => password;\n    if (typeof logger === 'function') {\n      this.log = log;\n    }\n  }\n  /**\n   * @public\n   * @param {0 | 1} level -\n   * @returns {void}\n   */\n  debug(level) {\n    DEBUG = level;\n  }\n  /**\n   * @public\n   * @returns {SMTPState} the current state\n   */\n  state() {\n    return this._state;\n  }\n  /**\n   * @public\n   * @returns {boolean} whether or not the instance is authorized\n   */\n  authorized() {\n    return this.loggedin;\n  }\n  /**\n   * Establish an SMTP connection.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   *\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {number} [port] the port to use for the connection\n   * @param {string} [host] the hostname to use for the connection\n   * @param {ConnectOptions} [options={}] the options\n   * @returns {void}\n   */\n  connect(callback) {\n    let port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.port;\n    let host = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.host;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.port = port;\n    this.host = host;\n    this.ssl = options.ssl || this.ssl;\n    if (this._state !== SMTPState.NOTCONNECTED) {\n      this.quit(() => this.connect(callback, port, host, options));\n    }\n    /**\n     * @returns {void}\n     */\n    const connected = () => {\n      this.log(`connected: ${this.host}:${this.port}`);\n      if (this.ssl && !this.tls) {\n        // if key/ca/cert was passed in, check if connection is authorized\n        if (typeof this.ssl !== 'boolean' && this.sock instanceof TLSSocket && !this.sock.authorized) {\n          this.close(true);\n          caller(callback, SMTPError.create('could not establish an ssl connection', SMTPErrorStates.CONNECTIONAUTH));\n        } else {\n          this._secure = true;\n        }\n      }\n    };\n    /**\n     * @param {Error} err err\n     * @returns {void}\n     */\n    const connectedErrBack = err => {\n      if (!err) {\n        connected();\n      } else {\n        this.close(true);\n        this.log(err);\n        caller(callback, SMTPError.create('could not connect', SMTPErrorStates.COULDNOTCONNECT, err));\n      }\n    };\n    const response = (err, msg) => {\n      if (err) {\n        if (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n          return;\n        }\n        this.close(true);\n        caller(callback, err);\n      } else if (msg.code == '220') {\n        this.log(msg.data);\n        // might happen first, so no need to wait on connected()\n        this._state = SMTPState.CONNECTED;\n        caller(callback, null, msg.data);\n      } else {\n        this.log(`response (data): ${msg.data}`);\n        this.quit(() => {\n          caller(callback, SMTPError.create('bad response on connection', SMTPErrorStates.BADRESPONSE, err, msg.data));\n        });\n      }\n    };\n    this._state = SMTPState.CONNECTING;\n    this.log(`connecting: ${this.host}:${this.port}`);\n    if (this.ssl) {\n      this.sock = connect(this.port, this.host.trim(), typeof this.ssl === 'object' ? this.ssl : {}, connected);\n    } else {\n      this.sock = new Socket();\n      this.sock.connect(this.port, this.host.trim(), connectedErrBack);\n    }\n    this.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n    this.sock.once('response', response);\n    this.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n  }\n  /**\n   * @public\n   * @param {string} str the string to send\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  send(str, callback) {\n    if (this.sock != null && this._state === SMTPState.CONNECTED) {\n      this.log(str);\n      this.sock.once('response', (err, msg) => {\n        if (err) {\n          caller(callback, err);\n        } else {\n          this.log(msg.data);\n          caller(callback, null, msg);\n        }\n      });\n      if (this.sock.writable) {\n        this.sock.write(str);\n      }\n    } else {\n      this.close(true);\n      caller(callback, SMTPError.create('no connection has been established', SMTPErrorStates.NOCONNECTION));\n    }\n  }\n  /**\n   * @public\n   * @param {string} cmd command to issue\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {(number[] | number)} [codes=[250]] array codes\n   * @returns {void}\n   */\n  command(cmd, callback) {\n    let codes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [250];\n    const codesArray = Array.isArray(codes) ? codes : typeof codes === 'number' ? [codes] : [250];\n    const response = (err, msg) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        const code = Number(msg.code);\n        if (codesArray.indexOf(code) !== -1) {\n          caller(callback, err, msg.data, msg.message);\n        } else if ((code === 450 || code === 451) && msg.message.toLowerCase().includes('greylist') && this.greylistResponseTracker.has(response) === false) {\n          this.greylistResponseTracker.add(response);\n          setTimeout(() => {\n            this.send(cmd + CRLF, response);\n          }, GREYLIST_DELAY);\n        } else {\n          const suffix = msg.message ? `: ${msg.message}` : '';\n          const errorMessage = `bad response on command '${cmd.split(' ')[0]}'${suffix}`;\n          caller(callback, SMTPError.create(errorMessage, SMTPErrorStates.BADRESPONSE, null, msg.data));\n        }\n      }\n    };\n    this.greylistResponseTracker.delete(response);\n    this.send(cmd + CRLF, response);\n  }\n  /**\n   * @public\n   * @description SMTP 'helo' command.\n   *\n   * Hostname to send for self command defaults to the FQDN of the local\n   * host.\n   *\n   * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n   * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'helo' request\n   * @returns {void}\n   */\n  helo(callback, domain) {\n    this.command(`helo ${domain || this.domain}`, (err, data) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        this.parse_smtp_features(data);\n        caller(callback, err, data);\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  starttls(callback) {\n    const response = (err, msg) => {\n      if (this.sock == null) {\n        throw new Error('null socket');\n      }\n      if (err) {\n        err.message += ' while establishing a starttls session';\n        caller(callback, err);\n      } else {\n        const secureContext = createSecureContext(typeof this.tls === 'object' ? this.tls : {});\n        const secureSocket = new TLSSocket(this.sock, {\n          secureContext\n        });\n        secureSocket.on('error', err => {\n          this.close(true);\n          caller(callback, err);\n        });\n        this._secure = true;\n        this.sock = secureSocket;\n        new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n        caller(callback, msg.data);\n      }\n    };\n    this.command('starttls', response, [220]);\n  }\n  /**\n   * @public\n   * @param {string} data the string to parse for features\n   * @returns {void}\n   */\n  parse_smtp_features(data) {\n    //  According to RFC1869 some (badly written)\n    //  MTA's will disconnect on an ehlo. Toss an exception if\n    //  that happens -ddm\n    data.split('\\n').forEach(ext => {\n      const parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/);\n      // To be able to communicate with as many SMTP servers as possible,\n      // we have to take the old-style auth advertisement into account,\n      // because:\n      // 1) Else our SMTP feature parser gets confused.\n      // 2) There are some servers that only advertise the auth methods we\n      // support using the old style.\n      if (parse != null && this.features != null) {\n        // RFC 1869 requires a space between ehlo keyword and parameters.\n        // It's actually stricter, in that only spaces are allowed between\n        // parameters, but were not going to check for that here.  Note\n        // that the space isn't present if there are no parameters.\n        this.features[parse[1].toLowerCase()] = parse[2] || true;\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'ehlo' request\n   * @returns {void}\n   */\n  ehlo(callback, domain) {\n    this.features = {};\n    this.command(`ehlo ${domain || this.domain}`, (err, data) => {\n      if (err) {\n        caller(callback, err);\n      } else {\n        this.parse_smtp_features(data);\n        if (this.tls && !this._secure) {\n          this.starttls(() => this.ehlo(callback, domain));\n        } else {\n          caller(callback, err, data);\n        }\n      }\n    });\n  }\n  /**\n   * @public\n   * @param {string} opt the features keyname to check\n   * @returns {boolean} whether the extension exists\n   */\n  has_extn(opt) {\n    var _a;\n    return ((_a = this.features) !== null && _a !== void 0 ? _a : {})[opt.toLowerCase()] === undefined;\n  }\n  /**\n   * @public\n   * @description SMTP 'help' command, returns text from the server\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} domain the domain to associate with the 'help' request\n   * @returns {void}\n   */\n  help(callback, domain) {\n    this.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  rset(callback) {\n    this.command('rset', callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  noop(callback) {\n    this.send('noop', callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} from the sender\n   * @returns {void}\n   */\n  mail(callback, from) {\n    this.command(`mail FROM:${from}`, callback);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} to the receiver\n   * @returns {void}\n   */\n  rcpt(callback, to) {\n    this.command(`RCPT TO:${to}`, callback, [250, 251]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  data(callback) {\n    this.command('data', callback, [354]);\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  data_end(callback) {\n    this.command(`${CRLF}.`, callback);\n  }\n  /**\n   * @public\n   * @param {string} data the message to send\n   * @returns {void}\n   */\n  message(data) {\n    var _a, _b;\n    this.log(data);\n    (_b = (_a = this.sock) === null || _a === void 0 ? void 0 : _a.write(data)) !== null && _b !== void 0 ? _b : this.log('no socket to write to');\n  }\n  /**\n   * @public\n   * @description SMTP 'verify' command -- checks for address validity.\n   * @param {string} address the address to validate\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  verify(address, callback) {\n    this.command(`vrfy ${address}`, callback, [250, 251, 252]);\n  }\n  /**\n   * @public\n   * @description SMTP 'expn' command -- expands a mailing list.\n   * @param {string} address the mailing list to expand\n   * @param {function(...any[]): void} callback function to call after response\n   * @returns {void}\n   */\n  expn(address, callback) {\n    this.command(`expn ${address}`, callback);\n  }\n  /**\n   * @public\n   * @description Calls this.ehlo() and, if an error occurs, this.helo().\n   *\n   * If there has been no previous EHLO or HELO command self session, self\n   * method tries ESMTP EHLO first.\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} [domain] the domain to associate with the command\n   * @returns {void}\n   */\n  ehlo_or_helo_if_needed(callback, domain) {\n    // is this code callable...?\n    if (!this.features) {\n      const response = (err, data) => caller(callback, err, data);\n      this.ehlo((err, data) => {\n        if (err) {\n          this.helo(response, domain);\n        } else {\n          caller(callback, err, data);\n        }\n      }, domain);\n    }\n  }\n  /**\n   * @public\n   *\n   * Log in on an SMTP server that requires authentication.\n   *\n   * If there has been no previous EHLO or HELO command self session, self\n   * method tries ESMTP EHLO first.\n   *\n   * This method will return normally if the authentication was successful.\n   *\n   * @param {function(...any[]): void} callback function to call after response\n   * @param {string} [user] the username to authenticate with\n   * @param {string} [password] the password for the authentication\n   * @param {{ method: string, domain: string }} [options] login options\n   * @returns {void}\n   */\n  login(callback, user, password) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _a, _b;\n    const login = {\n      user: user ? () => user : this.user,\n      password: password ? () => password : this.password,\n      method: (_b = (_a = options === null || options === void 0 ? void 0 : options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : ''\n    };\n    const domain = (options === null || options === void 0 ? void 0 : options.domain) || this.domain;\n    const initiate = (err, data) => {\n      var _a;\n      if (err) {\n        caller(callback, err);\n        return;\n      }\n      let method = null;\n      /**\n       * @param {string} challenge challenge\n       * @returns {string} base64 cram hash\n       */\n      const encodeCramMd5 = challenge => {\n        const hmac = createHmac('md5', login.password());\n        hmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n        return Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString('base64');\n      };\n      /**\n       * @returns {string} base64 login/password\n       */\n      const encodePlain = () => Buffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString('base64');\n      /**\n       * @see https://developers.google.com/gmail/xoauth2_protocol\n       * @returns {string} base64 xoauth2 auth token\n       */\n      const encodeXoauth2 = () => Buffer.from(`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`).toString('base64');\n      // List of authentication methods we support: from preferred to\n      // less preferred methods.\n      if (!method) {\n        const preferred = this.authentication;\n        let auth = '';\n        if (typeof ((_a = this.features) === null || _a === void 0 ? void 0 : _a['auth']) === 'string') {\n          auth = this.features['auth'];\n        }\n        for (let i = 0; i < preferred.length; i++) {\n          if (auth.includes(preferred[i])) {\n            method = preferred[i];\n            break;\n          }\n        }\n      }\n      /**\n       * handle bad responses from command differently\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @returns {void}\n       */\n      const failed = (err, data) => {\n        this.loggedin = false;\n        this.close(); // if auth is bad, close the connection, it won't get better by itself\n        caller(callback, SMTPError.create('authorization.failed', SMTPErrorStates.AUTHFAILED, err, data));\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @returns {void}\n       */\n      const response = (err, data) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          this.loggedin = true;\n          caller(callback, err, data);\n        }\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @param {string} msg msg\n       * @returns {void}\n       */\n      const attempt = (err, data, msg) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          if (method === AUTH_METHODS['CRAM-MD5']) {\n            this.command(encodeCramMd5(msg), response, [235, 503]);\n          } else if (method === AUTH_METHODS.LOGIN) {\n            this.command(Buffer.from(login.password()).toString('base64'), response, [235, 503]);\n          }\n        }\n      };\n      /**\n       * @param {Error} err err\n       * @param {unknown} data data\n       * @param {string} msg msg\n       * @returns {void}\n       */\n      const attemptUser = (err, data) => {\n        if (err) {\n          failed(err, data);\n        } else {\n          if (method === AUTH_METHODS.LOGIN) {\n            this.command(Buffer.from(login.user()).toString('base64'), attempt, [334]);\n          }\n        }\n      };\n      switch (method) {\n        case AUTH_METHODS['CRAM-MD5']:\n          this.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n          break;\n        case AUTH_METHODS.LOGIN:\n          this.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n          break;\n        case AUTH_METHODS.PLAIN:\n          this.command(`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`, response, [235, 503]);\n          break;\n        case AUTH_METHODS.XOAUTH2:\n          this.command(`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`, response, [235, 503]);\n          break;\n        default:\n          caller(callback, SMTPError.create('no form of authorization supported', SMTPErrorStates.AUTHNOTSUPPORTED, null, data));\n          break;\n      }\n    };\n    this.ehlo_or_helo_if_needed(initiate, domain);\n  }\n  /**\n   * @public\n   * @param {boolean} [force=false] whether or not to force destroy the connection\n   * @returns {void}\n   */\n  close() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.sock) {\n      if (force) {\n        this.log('smtp connection destroyed!');\n        this.sock.destroy();\n      } else {\n        this.log('smtp connection closed.');\n        this.sock.end();\n      }\n    }\n    if (this.monitor) {\n      this.monitor.stop();\n      this.monitor = null;\n    }\n    this._state = SMTPState.NOTCONNECTED;\n    this._secure = false;\n    this.sock = null;\n    this.features = null;\n    this.loggedin = !(this.user() && this.password());\n  }\n  /**\n   * @public\n   * @param {function(...any[]): void} [callback] function to call after response\n   * @returns {void}\n   */\n  quit(callback) {\n    this.command('quit', (err, data) => {\n      caller(callback, err, data);\n      this.close();\n    }, [221, 250]);\n  }\n}\nclass SMTPClient {\n  /**\n   * Create a standard SMTP client backed by a self-managed SMTP connection.\n   *\n   * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n   *\n   * @param {SMTPConnectionOptions} server smtp options\n   */\n  constructor(server) {\n    this.queue = [];\n    this.sending = false;\n    this.ready = false;\n    this.timer = null;\n    this.smtp = new SMTPConnection(server);\n  }\n  /**\n   * @public\n   * @template {Message | MessageHeaders} T\n   * @param {T} msg the message to send\n   * @param {MessageCallback<T>} callback receiver for the error (if any) as well as the passed-in message / headers\n   * @returns {void}\n   */\n  send(msg, callback) {\n    const message = msg instanceof Message ? msg : this._canMakeMessage(msg) ? new Message(msg) : null;\n    if (message == null) {\n      callback(new Error('message is not a valid Message instance'), msg);\n      return;\n    }\n    const {\n      isValid,\n      validationError\n    } = message.checkValidity();\n    if (isValid) {\n      const stack = this.createMessageStack(message, callback);\n      if (stack.to.length === 0) {\n        return callback(new Error('No recipients found in message'), msg);\n      }\n      this.queue.push(stack);\n      this._poll();\n    } else {\n      callback(new Error(validationError), msg);\n    }\n  }\n  /**\n   * @public\n   * @template {Message | MessageHeaders} T\n   * @param {T} msg the message to send\n   * @returns {Promise<T>} a promise that resolves to the passed-in message / headers\n   */\n  sendAsync(msg) {\n    return new Promise((resolve, reject) => {\n      this.send(msg, (err, message) => {\n        if (err != null) {\n          reject(err);\n        } else {\n          // unfortunately, the conditional type doesn't reach here\n          // fortunately, we only return a `Message` when err is null, so this is safe\n          resolve(message);\n        }\n      });\n    });\n  }\n  /**\n   * @public\n   * @description Converts a message to the raw object used by the internal stack.\n   * @param {Message} message message to convert\n   * @param {MessageCallback} callback errback\n   * @returns {MessageStack} raw message object\n   */\n  createMessageStack(message) {\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n      /* ø */\n    };\n    const [{\n      address: from\n    }] = addressparser(message.header.from);\n    const stack = {\n      message,\n      to: [],\n      from,\n      callback: callback.bind(this)\n    };\n    const {\n      header: {\n        to,\n        cc,\n        bcc,\n        'return-path': returnPath\n      }\n    } = message;\n    if ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n      stack.to = addressparser(to);\n    }\n    if ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n      stack.to = stack.to.concat(addressparser(cc).filter(x => stack.to.some(y => y.address === x.address) === false));\n    }\n    if ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n      stack.to = stack.to.concat(addressparser(bcc).filter(x => stack.to.some(y => y.address === x.address) === false));\n    }\n    if (typeof returnPath === 'string' && returnPath.length > 0) {\n      const parsedReturnPath = addressparser(returnPath);\n      if (parsedReturnPath.length > 0) {\n        const [{\n          address: returnPathAddress\n        }] = parsedReturnPath;\n        stack.returnPath = returnPathAddress;\n      }\n    }\n    return stack;\n  }\n  /**\n   * @protected\n   * @returns {void}\n   */\n  _poll() {\n    if (this.timer != null) {\n      clearTimeout(this.timer);\n    }\n    if (this.queue.length) {\n      if (this.smtp.state() == SMTPState.NOTCONNECTED) {\n        this._connect(this.queue[0]);\n      } else if (this.smtp.state() == SMTPState.CONNECTED && !this.sending && this.ready) {\n        this._sendmail(this.queue.shift());\n      }\n    }\n    // wait around 1 seconds in case something does come in,\n    // otherwise close out SMTP connection if still open\n    else if (this.smtp.state() == SMTPState.CONNECTED) {\n      this.timer = setTimeout(() => this.smtp.quit(), 1000);\n    }\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n  _connect(stack) {\n    /**\n     * @param {Error} err callback error\n     * @returns {void}\n     */\n    const connect = err => {\n      if (!err) {\n        const begin = err => {\n          if (!err) {\n            this.ready = true;\n            this._poll();\n          } else {\n            stack.callback(err, stack.message);\n            // clear out the queue so all callbacks can be called with the same error message\n            this.queue.shift();\n            this._poll();\n          }\n        };\n        if (!this.smtp.authorized()) {\n          this.smtp.login(begin);\n        } else {\n          this.smtp.ehlo_or_helo_if_needed(begin);\n        }\n      } else {\n        stack.callback(err, stack.message);\n        // clear out the queue so all callbacks can be called with the same error message\n        this.queue.shift();\n        this._poll();\n      }\n    };\n    this.ready = false;\n    this.smtp.connect(connect);\n  }\n  /**\n   * @protected\n   * @param {MessageStack} msg message stack\n   * @returns {boolean} can make message\n   */\n  _canMakeMessage(msg) {\n    return msg.from && (msg.to || msg.cc || msg.bcc) && (msg.text !== undefined || this._containsInlinedHtml(msg.attachment));\n  }\n  /**\n   * @protected\n   * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n   * @returns {boolean} whether the attachment contains inlined html\n   */\n  _containsInlinedHtml(attachment) {\n    if (Array.isArray(attachment)) {\n      return attachment.some(att => {\n        return this._isAttachmentInlinedHtml(att);\n      });\n    } else {\n      return this._isAttachmentInlinedHtml(attachment);\n    }\n  }\n  /**\n   * @protected\n   * @param {MessageAttachment} attachment attachment\n   * @returns {boolean} whether the attachment is inlined html\n   */\n  _isAttachmentInlinedHtml(attachment) {\n    return attachment && (attachment.data || attachment.path) && attachment.alternative === true;\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @param {function(MessageStack): void} next next\n   * @returns {function(Error): void} callback\n   */\n  _sendsmtp(stack, next) {\n    /**\n     * @param {Error} [err] error\n     * @returns {void}\n     */\n    return err => {\n      if (!err && next) {\n        next.apply(this, [stack]);\n      } else {\n        // if we snag on SMTP commands, call done, passing the error\n        // but first reset SMTP state so queue can continue polling\n        this.smtp.rset(() => this._senddone(err, stack));\n      }\n    };\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n  _sendmail(stack) {\n    const from = stack.returnPath || stack.from;\n    this.sending = true;\n    this.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n  _sendrcpt(stack) {\n    var _a;\n    if (stack.to == null || typeof stack.to === 'string') {\n      throw new TypeError('stack.to must be array');\n    }\n    const to = (_a = stack.to.shift()) === null || _a === void 0 ? void 0 : _a.address;\n    this.smtp.rcpt(this._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata), `<${to}>`);\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n  _senddata(stack) {\n    this.smtp.data(this._sendsmtp(stack, this._sendmessage));\n  }\n  /**\n   * @protected\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n  _sendmessage(stack) {\n    const stream = stack.message.stream();\n    stream.on('data', data => this.smtp.message(data));\n    stream.on('end', () => {\n      this.smtp.data_end(this._sendsmtp(stack, () => this._senddone(null, stack)));\n    });\n    // there is no way to cancel a message while in the DATA portion,\n    // so we have to close the socket to prevent a bad email from going out\n    stream.on('error', err => {\n      this.smtp.close();\n      this._senddone(err, stack);\n    });\n  }\n  /**\n   * @protected\n   * @param {Error} err err\n   * @param {MessageStack} stack stack\n   * @returns {void}\n   */\n  _senddone(err, stack) {\n    this.sending = false;\n    stack.callback(err, stack.message);\n    this._poll();\n  }\n}\nexport { AUTH_METHODS, BUFFERSIZE, DEFAULT_TIMEOUT, MIME64CHUNK, MIMECHUNK, Message, SMTPClient, SMTPConnection, SMTPError, SMTPErrorStates, SMTPResponseMonitor, SMTPState, addressparser, getRFC2822Date, getRFC2822DateUTC, isRFC2822Date, mimeEncode, mimeWordEncode };","map":{"version":3,"names":["existsSync","open","read","closeSync","close","hostname","Stream","TextEncoder","TextDecoder","createHmac","EventEmitter","Socket","connect","TLSSocket","createSecureContext","OPERATORS","Map","tokenizeAddress","address","arguments","length","undefined","_a","_b","tokens","token","operator","character","toString","push","type","value","has","get","map","x","trim","filter","convertAddressTokens","addressObjects","groups","addresses","comments","texts","state","isGroup","handleToken","name","join","group","addressparser","i","match","splice","replace","getRFC2822Date","date","Date","useUtc","getRFC2822DateUTC","dates","split","day","toUTCString","pop","rfc2822re","isRFC2822Date","test","encoder","RANGES","LOOKUP","MAX_CHUNK_LENGTH","MAX_MIME_WORD_LENGTH","MAX_B64_MIME_WORD_BYTE_LENGTH","tripletToBase64","num","encodeChunk","uint8","start","end","output","encodeBase64","data","len","extraBytes","len2","tmp","splitMimeEncodedString","str","maxlen","minWordLength","maxWordLength","Math","max","lines","curLine","substr","index","done","chr","parseInt","checkRanges","nr","reduce","val","range","mimeEncode","encoding","decoder","buffer","encode","decode","aggregate","ord","String","fromCharCode","toUpperCase","mimeWordEncode","mimeWordEncoding","parts","encodedStr","charCodeAt","j","substring","p","CRLF$1","MIMECHUNK","MIME64CHUNK","BUFFERSIZE","counter","generateBoundary","text","possible","charAt","floor","random","convertPersonToAddress","person","_ref","convertDashDelimitedTextToSnakeCase","toLowerCase","Message","constructor","headers","attachments","header","getTime","process","pid","content","alternative","attachment","Array","isArray","attach","subject","options","charset","inline","checkValidity","from","isValid","validationError","to","cc","bcc","failed","forEach","path","stream","readable","valid","callback","MessageStream","on","err","readAsync","Promise","resolve","reject","message","paused","Buffer","alloc","bufferIndex","bytes","byteLength","write","emit","loops","ceil","loop","once","outputAttachmentHeaders","method","concat","outputBase64","outputFile","next","chunk","inputEncoding","opened","fd","readBytes","Error","removeListener","outputStream","previous","resume","pause","buff","isBuffer","padded","copy","outputAttachment","build","outputData","outputMessage","boundary","list","related","outputRelated","outputMixed","outputText","close$1","outputAlternative","encoded","finish","removeAllListeners","outputHeaderData","outputHeader","Object","prototype","hasOwnProperty","call","nextTick","destroy","destroySoon","SMTPErrorStates","COULDNOTCONNECT","BADRESPONSE","AUTHFAILED","TIMEDOUT","ERROR","NOCONNECTION","AUTHNOTSUPPORTED","CONNECTIONCLOSED","CONNECTIONENDED","CONNECTIONAUTH","SMTPError","code","smtp","create","error","msg","SMTPResponseMonitor","timeout","onerror","notify","line","timedout","watch","stop","setTimeout","AUTH_METHODS","PLAIN","LOGIN","XOAUTH2","SMTPState","NOTCONNECTED","CONNECTING","CONNECTED","DEFAULT_TIMEOUT","SMTP_PORT","SMTP_SSL_PORT","SMTP_TLS_PORT","CRLF","GREYLIST_DELAY","DEBUG","log","_len","args","_key","d","console","JSON","stringify","caller","_len2","_key2","SMTPConnection","host","user","password","domain","port","ssl","tls","logger","authentication","_state","_secure","loggedin","sock","features","monitor","greylistResponseTracker","WeakSet","debug","level","authorized","quit","connected","connectedErrBack","response","send","writable","command","cmd","codes","codesArray","Number","indexOf","includes","add","suffix","errorMessage","delete","helo","parse_smtp_features","starttls","secureContext","secureSocket","ext","parse","ehlo","has_extn","opt","help","rset","noop","mail","rcpt","data_end","verify","expn","ehlo_or_helo_if_needed","login","initiate","encodeCramMd5","challenge","hmac","update","digest","encodePlain","encodeXoauth2","preferred","auth","attempt","attemptUser","force","SMTPClient","server","queue","sending","ready","timer","_canMakeMessage","stack","createMessageStack","_poll","sendAsync","bind","returnPath","some","y","parsedReturnPath","returnPathAddress","clearTimeout","_connect","_sendmail","shift","begin","_containsInlinedHtml","att","_isAttachmentInlinedHtml","_sendsmtp","apply","_senddone","_sendrcpt","TypeError","_senddata","_sendmessage"],"sources":["C:/Users/ANIKET/Desktop/fitclubereactapp2/node_modules/emailjs/email.js"],"sourcesContent":["import { existsSync, open, read, closeSync, close } from 'fs';\nimport { hostname } from 'os';\nimport { Stream } from 'stream';\nimport { TextEncoder, TextDecoder } from 'util';\nimport { createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { Socket } from 'net';\nimport { connect, TLSSocket, createSecureContext } from 'tls';\n\n/*\n * Operator tokens and which tokens are expected to end the sequence\n */\nconst OPERATORS = new Map([\n    ['\"', '\"'],\n    ['(', ')'],\n    ['<', '>'],\n    [',', ''],\n    // Groups are ended by semicolons\n    [':', ';'],\n    // Semicolons are not a legal delimiter per the RFC2822 grammar other\n    // than for terminating a group, but they are also not valid for any\n    // other use in this context.  Given that some mail clients have\n    // historically allowed the semicolon as a delimiter equivalent to the\n    // comma in their UI, it makes sense to treat them the same as a comma\n    // when used outside of a group.\n    [';', ''],\n]);\n/**\n * Tokenizes the original input string\n *\n * @param {string | string[] | undefined} address string(s) to tokenize\n * @return {AddressToken[]} An array of operator|text tokens\n */\nfunction tokenizeAddress(address = '') {\n    var _a, _b;\n    const tokens = [];\n    let token = undefined;\n    let operator = undefined;\n    for (const character of address.toString()) {\n        if (((_a = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _a !== void 0 ? _a : 0) > 0 && character === operator) {\n            tokens.push({ type: 'operator', value: character });\n            token = undefined;\n            operator = undefined;\n        }\n        else if (((_b = operator === null || operator === void 0 ? void 0 : operator.length) !== null && _b !== void 0 ? _b : 0) === 0 && OPERATORS.has(character)) {\n            tokens.push({ type: 'operator', value: character });\n            token = undefined;\n            operator = OPERATORS.get(character);\n        }\n        else {\n            if (token == null) {\n                token = { type: 'text', value: character };\n                tokens.push(token);\n            }\n            else {\n                token.value += character;\n            }\n        }\n    }\n    return tokens\n        .map((x) => {\n        x.value = x.value.trim();\n        return x;\n    })\n        .filter((x) => x.value.length > 0);\n}\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {AddressToken[]} tokens Tokens object\n * @return {AddressObject[]} addresses object array\n */\nfunction convertAddressTokens(tokens) {\n    const addressObjects = [];\n    const groups = [];\n    let addresses = [];\n    let comments = [];\n    let texts = [];\n    let state = 'text';\n    let isGroup = false;\n    function handleToken(token) {\n        if (token.type === 'operator') {\n            switch (token.value) {\n                case '<':\n                    state = 'address';\n                    break;\n                case '(':\n                    state = 'comment';\n                    break;\n                case ':':\n                    state = 'group';\n                    isGroup = true;\n                    break;\n                default:\n                    state = 'text';\n                    break;\n            }\n        }\n        else if (token.value.length > 0) {\n            switch (state) {\n                case 'address':\n                    addresses.push(token.value);\n                    break;\n                case 'comment':\n                    comments.push(token.value);\n                    break;\n                case 'group':\n                    groups.push(token.value);\n                    break;\n                default:\n                    texts.push(token.value);\n                    break;\n            }\n        }\n    }\n    // Filter out <addresses>, (comments) and regular text\n    for (const token of tokens) {\n        handleToken(token);\n    }\n    // If there is no text but a comment, replace the two\n    if (texts.length === 0 && comments.length > 0) {\n        texts = [...comments];\n        comments = [];\n    }\n    // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n    if (isGroup) {\n        addressObjects.push({\n            name: texts.length === 0 ? undefined : texts.join(' '),\n            group: groups.length > 0 ? addressparser(groups.join(',')) : [],\n        });\n    }\n    else {\n        // If no address was found, try to detect one from regular text\n        if (addresses.length === 0 && texts.length > 0) {\n            for (let i = texts.length - 1; i >= 0; i--) {\n                if (texts[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    addresses = texts.splice(i, 1);\n                    break;\n                }\n            }\n            // still no address\n            if (addresses.length === 0) {\n                for (let i = texts.length - 1; i >= 0; i--) {\n                    texts[i] = texts[i]\n                        .replace(/\\s*\\b[^@\\s]+@[^@\\s]+\\b\\s*/, (address) => {\n                        if (addresses.length === 0) {\n                            addresses = [address.trim()];\n                            return ' ';\n                        }\n                        else {\n                            return address;\n                        }\n                    })\n                        .trim();\n                    if (addresses.length > 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        // If there's still is no text but a comment exixts, replace the two\n        if (texts.length === 0 && comments.length > 0) {\n            texts = [...comments];\n            comments = [];\n        }\n        // Keep only the first address occurence, push others to regular text\n        if (addresses.length > 1) {\n            texts = [...texts, ...addresses.splice(1)];\n        }\n        if (addresses.length === 0 && isGroup) {\n            return [];\n        }\n        else {\n            // Join values with spaces\n            let address = addresses.join(' ');\n            let name = texts.length === 0 ? address : texts.join(' ');\n            if (address === name) {\n                if (address.match(/@/)) {\n                    name = '';\n                }\n                else {\n                    address = '';\n                }\n            }\n            addressObjects.push({ address, name });\n        }\n    }\n    return addressObjects;\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    \"Name <address@domain>\"\n *\n * will be converted to\n *\n *     [{name: \"Name\", address: \"address@domain\"}]\n *\n * @param {string | string[] | undefined} address Address field\n * @return {AddressObject[]} An array of address objects\n */\nfunction addressparser(address) {\n    const addresses = [];\n    let tokens = [];\n    for (const token of tokenizeAddress(address)) {\n        if (token.type === 'operator' &&\n            (token.value === ',' || token.value === ';')) {\n            if (tokens.length > 0) {\n                addresses.push(...convertAddressTokens(tokens));\n            }\n            tokens = [];\n        }\n        else {\n            tokens.push(token);\n        }\n    }\n    if (tokens.length > 0) {\n        addresses.push(...convertAddressTokens(tokens));\n    }\n    return addresses;\n}\n\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format\n * @param {boolean} [useUtc] whether to parse the date as UTC (default: false)\n * @returns {string} the converted date\n */\nfunction getRFC2822Date(date = new Date(), useUtc = false) {\n    if (useUtc) {\n        return getRFC2822DateUTC(date);\n    }\n    const dates = date\n        .toString()\n        .replace('GMT', '')\n        .replace(/\\s\\(.*\\)$/, '')\n        .split(' ');\n    dates[0] = dates[0] + ',';\n    const day = dates[1];\n    dates[1] = dates[2];\n    dates[2] = day;\n    return dates.join(' ');\n}\n/**\n * @param {Date} [date] an optional date to convert to RFC2822 format (UTC)\n * @returns {string} the converted date\n */\nfunction getRFC2822DateUTC(date = new Date()) {\n    const dates = date.toUTCString().split(' ');\n    dates.pop(); // remove timezone\n    dates.push('+0000');\n    return dates.join(' ');\n}\n/**\n * RFC 2822 regex\n * @see https://tools.ietf.org/html/rfc2822#section-3.3\n * @see https://github.com/moment/moment/blob/a831fc7e2694281ce31e4f090bbcf90a690f0277/src/lib/create/from-string.js#L101\n */\nconst rfc2822re = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n/**\n * @param {string} [date] a string to check for conformance to the [rfc2822](https://tools.ietf.org/html/rfc2822#section-3.3) standard\n * @returns {boolean} the result of the conformance check\n */\nfunction isRFC2822Date(date) {\n    return rfc2822re.test(date);\n}\n\n// adapted from https://github.com/emailjs/emailjs-mime-codec/blob/6909c706b9f09bc0e5c3faf48f723cca53e5b352/src/mimecodec.js\nconst encoder = new TextEncoder();\n/**\n * @see https://tools.ietf.org/html/rfc2045#section-6.7\n */\nconst RANGES = [\n    [0x09],\n    [0x0a],\n    [0x0d],\n    [0x20, 0x3c],\n    [0x3e, 0x7e], // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n];\nconst LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nconst MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\nconst MAX_MIME_WORD_LENGTH = 52;\nconst MAX_B64_MIME_WORD_BYTE_LENGTH = 39;\nfunction tripletToBase64(num) {\n    return (LOOKUP[(num >> 18) & 0x3f] +\n        LOOKUP[(num >> 12) & 0x3f] +\n        LOOKUP[(num >> 6) & 0x3f] +\n        LOOKUP[num & 0x3f]);\n}\nfunction encodeChunk(uint8, start, end) {\n    let output = '';\n    for (let i = start; i < end; i += 3) {\n        output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n    }\n    return output;\n}\nfunction encodeBase64(data) {\n    const len = data.length;\n    const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n    let output = '';\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n        output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        const tmp = data[len - 1];\n        output += LOOKUP[tmp >> 2];\n        output += LOOKUP[(tmp << 4) & 0x3f];\n        output += '==';\n    }\n    else if (extraBytes === 2) {\n        const tmp = (data[len - 2] << 8) + data[len - 1];\n        output += LOOKUP[tmp >> 10];\n        output += LOOKUP[(tmp >> 4) & 0x3f];\n        output += LOOKUP[(tmp << 2) & 0x3f];\n        output += '=';\n    }\n    return output;\n}\n/**\n * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n *\n * @param {string} str Mime encoded string to be split up\n * @param {number} maxlen Maximum length of characters for one part (minimum 12)\n * @return {string[]} lines\n */\nfunction splitMimeEncodedString(str, maxlen = 12) {\n    const minWordLength = 12; // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n    const maxWordLength = Math.max(maxlen, minWordLength);\n    const lines = [];\n    while (str.length) {\n        let curLine = str.substr(0, maxWordLength);\n        const match = curLine.match(/=[0-9A-F]?$/i); // skip incomplete escaped char\n        if (match) {\n            curLine = curLine.substr(0, match.index);\n        }\n        let done = false;\n        while (!done) {\n            let chr;\n            done = true;\n            const match = str.substr(curLine.length).match(/^=([0-9A-F]{2})/i); // check if not middle of a unicode char sequence\n            if (match) {\n                chr = parseInt(match[1], 16);\n                // invalid sequence, move one char back anc recheck\n                if (chr < 0xc2 && chr > 0x7f) {\n                    curLine = curLine.substr(0, curLine.length - 3);\n                    done = false;\n                }\n            }\n        }\n        if (curLine.length) {\n            lines.push(curLine);\n        }\n        str = str.substr(curLine.length);\n    }\n    return lines;\n}\n/**\n *\n * @param {number} nr number\n * @returns {boolean} if number is in range\n */\nfunction checkRanges(nr) {\n    return RANGES.reduce((val, range) => val ||\n        (range.length === 1 && nr === range[0]) ||\n        (range.length === 2 && nr >= range[0] && nr <= range[1]), false);\n}\n/**\n * Encodes all non printable and non ascii bytes to =XX form, where XX is the\n * byte value in hex. This function does not convert linebreaks etc. it\n * only escapes character sequences\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data Either a string or an Uint8Array\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Mime encoded string\n */\nfunction mimeEncode(data = '', encoding = 'utf-8') {\n    const decoder = new TextDecoder(encoding);\n    const buffer = typeof data === 'string'\n        ? encoder.encode(data)\n        : encoder.encode(decoder.decode(data));\n    return buffer.reduce((aggregate, ord, index) => checkRanges(ord) &&\n        !((ord === 0x20 || ord === 0x09) &&\n            (index === buffer.length - 1 ||\n                buffer[index + 1] === 0x0a ||\n                buffer[index + 1] === 0x0d))\n        ? // if the char is in allowed range, then keep as is, unless it is a ws in the end of a line\n            aggregate + String.fromCharCode(ord)\n        : `${aggregate}=${ord < 0x10 ? '0' : ''}${ord\n            .toString(16)\n            .toUpperCase()}`, '');\n}\n/**\n * Encodes a string or an Uint8Array to an UTF-8 MIME Word\n *\n * NOTE: Encoding support depends on util.TextDecoder, which is severely limited\n * prior to Node.js 13.\n *\n * @see https://tools.ietf.org/html/rfc2047\n * @see https://nodejs.org/api/util.html#util_whatwg_supported_encodings\n * @see https://github.com/nodejs/node/issues/19214\n *\n * @param {string|Uint8Array} data String to be encoded\n * @param {'Q' | 'B'} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n * @param {string} encoding WHATWG supported encoding\n * @return {string} Single or several mime words joined together\n */\nfunction mimeWordEncode(data, mimeWordEncoding = 'Q', encoding = 'utf-8') {\n    let parts = [];\n    const decoder = new TextDecoder(encoding);\n    const str = typeof data === 'string' ? data : decoder.decode(data);\n    if (mimeWordEncoding === 'Q') {\n        const encodedStr = mimeEncode(str, encoding).replace(/[^a-z0-9!*+\\-/=]/gi, (chr) => chr === ' '\n            ? '_'\n            : '=' +\n                (chr.charCodeAt(0) < 0x10 ? '0' : '') +\n                chr.charCodeAt(0).toString(16).toUpperCase());\n        parts =\n            encodedStr.length < MAX_MIME_WORD_LENGTH\n                ? [encodedStr]\n                : splitMimeEncodedString(encodedStr, MAX_MIME_WORD_LENGTH);\n    }\n    else {\n        // Fits as much as possible into every line without breaking utf-8 multibyte characters' octets up across lines\n        let j = 0;\n        let i = 0;\n        while (i < str.length) {\n            if (encoder.encode(str.substring(j, i)).length >\n                MAX_B64_MIME_WORD_BYTE_LENGTH) {\n                // we went one character too far, substring at the char before\n                parts.push(str.substring(j, i - 1));\n                j = i - 1;\n            }\n            else {\n                i++;\n            }\n        }\n        // add the remainder of the string\n        str.substring(j) && parts.push(str.substring(j));\n        parts = parts.map((x) => encoder.encode(x)).map((x) => encodeBase64(x));\n    }\n    return parts\n        .map((p) => `=?UTF-8?${mimeWordEncoding}?${p}?= `)\n        .join('')\n        .trim();\n}\n\nconst CRLF$1 = '\\r\\n';\n/**\n * MIME standard wants 76 char chunks when sending out.\n */\nconst MIMECHUNK = 76;\n/**\n * meets both base64 and mime divisibility\n */\nconst MIME64CHUNK = (MIMECHUNK * 6);\n/**\n * size of the message stream buffer\n */\nconst BUFFERSIZE = (MIMECHUNK * 24 * 7);\nlet counter = 0;\nfunction generateBoundary() {\n    let text = '';\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'()+_,-./:=?\";\n    for (let i = 0; i < 69; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n}\nfunction convertPersonToAddress(person) {\n    return addressparser(person)\n        .map(({ name, address }) => {\n        return name\n            ? `${mimeWordEncode(name).replace(/,/g, '=2C')} <${address}>`\n            : address;\n    })\n        .join(', ');\n}\nfunction convertDashDelimitedTextToSnakeCase(text) {\n    return text\n        .toLowerCase()\n        .replace(/^(.)|-(.)/g, (match) => match.toUpperCase());\n}\nclass Message {\n    /**\n     * Construct an rfc2822-compliant message object.\n     *\n     * Special notes:\n     * - The `from` field is required.\n     * - At least one `to`, `cc`, or `bcc` header is also required.\n     * - You can also add whatever other headers you want.\n     *\n     * @see https://tools.ietf.org/html/rfc2822\n     * @param {Partial<MessageHeaders>} headers Message headers\n     */\n    constructor(headers) {\n        this.attachments = [];\n        this.header = {\n            'message-id': `<${new Date().getTime()}.${counter++}.${process.pid}@${hostname()}>`,\n            date: getRFC2822Date(),\n        };\n        this.content = 'text/plain; charset=utf-8';\n        this.alternative = null;\n        for (const header in headers) {\n            // allow user to override default content-type to override charset or send a single non-text message\n            if (/^content-type$/i.test(header)) {\n                this.content = headers[header];\n            }\n            else if (header === 'text') {\n                this.text = headers[header];\n            }\n            else if (header === 'attachment' &&\n                typeof headers[header] === 'object') {\n                const attachment = headers[header];\n                if (Array.isArray(attachment)) {\n                    for (let i = 0; i < attachment.length; i++) {\n                        this.attach(attachment[i]);\n                    }\n                }\n                else if (attachment != null) {\n                    this.attach(attachment);\n                }\n            }\n            else if (header === 'subject') {\n                this.header.subject = mimeWordEncode(headers.subject);\n            }\n            else if (/^(cc|bcc|to|from)/i.test(header)) {\n                this.header[header.toLowerCase()] = convertPersonToAddress(headers[header]);\n            }\n            else {\n                // allow any headers the user wants to set??\n                this.header[header.toLowerCase()] = headers[header];\n            }\n        }\n    }\n    /**\n     * Attach a file to the message.\n     *\n     * Can be called multiple times, each adding a new attachment.\n     *\n     * @public\n     * @param {MessageAttachment} options attachment options\n     * @returns {Message} the current instance for chaining\n     */\n    attach(options) {\n        // sender can specify an attachment as an alternative\n        if (options.alternative) {\n            this.alternative = options;\n            this.alternative.charset = options.charset || 'utf-8';\n            this.alternative.type = options.type || 'text/html';\n            this.alternative.inline = true;\n        }\n        else {\n            this.attachments.push(options);\n        }\n        return this;\n    }\n    /**\n     * @public\n     * @returns {{ isValid: boolean, validationError: (string | undefined) }} an object specifying whether this message is validly formatted, and the first validation error if it is not.\n     */\n    checkValidity() {\n        if (typeof this.header.from !== 'string' &&\n            Array.isArray(this.header.from) === false) {\n            return {\n                isValid: false,\n                validationError: 'Message must have a `from` header',\n            };\n        }\n        if (typeof this.header.to !== 'string' &&\n            Array.isArray(this.header.to) === false &&\n            typeof this.header.cc !== 'string' &&\n            Array.isArray(this.header.cc) === false &&\n            typeof this.header.bcc !== 'string' &&\n            Array.isArray(this.header.bcc) === false) {\n            return {\n                isValid: false,\n                validationError: 'Message must have at least one `to`, `cc`, or `bcc` header',\n            };\n        }\n        if (this.attachments.length > 0) {\n            const failed = [];\n            this.attachments.forEach((attachment) => {\n                if (attachment.path) {\n                    if (existsSync(attachment.path) === false) {\n                        failed.push(`${attachment.path} does not exist`);\n                    }\n                }\n                else if (attachment.stream) {\n                    if (!attachment.stream.readable) {\n                        failed.push('attachment stream is not readable');\n                    }\n                }\n                else if (!attachment.data) {\n                    failed.push('attachment has no data associated with it');\n                }\n            });\n            return {\n                isValid: failed.length === 0,\n                validationError: failed.join(', '),\n            };\n        }\n        return { isValid: true, validationError: undefined };\n    }\n    /**\n     * @public\n     * @deprecated does not conform to the `errback` style followed by the rest of the library, and will be removed in the next major version. use `checkValidity` instead.\n     * @param {function(isValid: boolean, invalidReason: (string | undefined)): void} callback .\n     * @returns {void}\n     */\n    valid(callback) {\n        const { isValid, validationError } = this.checkValidity();\n        callback(isValid, validationError);\n    }\n    /**\n     * @public\n     * @returns {MessageStream} a stream of the current message\n     */\n    stream() {\n        return new MessageStream(this);\n    }\n    /**\n     * @public\n     * @param {function(Error, string): void} callback the function to call with the error and buffer\n     * @returns {void}\n     */\n    read(callback) {\n        let buffer = '';\n        const str = this.stream();\n        str.on('data', (data) => (buffer += data));\n        str.on('end', (err) => callback(err, buffer));\n        str.on('error', (err) => callback(err, buffer));\n    }\n    readAsync() {\n        return new Promise((resolve, reject) => {\n            this.read((err, buffer) => {\n                if (err != null) {\n                    reject(err);\n                }\n                else {\n                    resolve(buffer);\n                }\n            });\n        });\n    }\n}\nclass MessageStream extends Stream {\n    /**\n     * @param {Message} message the message to stream\n     */\n    constructor(message) {\n        super();\n        this.message = message;\n        this.readable = true;\n        this.paused = false;\n        this.buffer = Buffer.alloc(MIMECHUNK * 24 * 7);\n        this.bufferIndex = 0;\n        /**\n         * @param {string} [data] the data to output\n         * @param {Function} [callback] the function\n         * @param {any[]} [args] array of arguments to pass to the callback\n         * @returns {void}\n         */\n        const output = (data) => {\n            // can we buffer the data?\n            if (this.buffer != null) {\n                const bytes = Buffer.byteLength(data);\n                if (bytes + this.bufferIndex < this.buffer.length) {\n                    this.buffer.write(data, this.bufferIndex);\n                    this.bufferIndex += bytes;\n                }\n                // we can't buffer the data, so ship it out!\n                else if (bytes > this.buffer.length) {\n                    if (this.bufferIndex) {\n                        this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n                        this.bufferIndex = 0;\n                    }\n                    const loops = Math.ceil(data.length / this.buffer.length);\n                    let loop = 0;\n                    while (loop < loops) {\n                        this.emit('data', data.substring(this.buffer.length * loop, this.buffer.length * (loop + 1)));\n                        loop++;\n                    }\n                } // we need to clean out the buffer, it is getting full\n                else {\n                    if (!this.paused) {\n                        this.emit('data', this.buffer.toString('utf-8', 0, this.bufferIndex));\n                        this.buffer.write(data, 0);\n                        this.bufferIndex = bytes;\n                    }\n                    else {\n                        // we can't empty out the buffer, so let's wait till we resume before adding to it\n                        this.once('resume', () => output(data));\n                    }\n                }\n            }\n        };\n        /**\n         * @param {MessageAttachment} [attachment] the attachment whose headers you would like to output\n         * @returns {void}\n         */\n        const outputAttachmentHeaders = (attachment) => {\n            let data = [];\n            const headers = {\n                'content-type': attachment.type +\n                    (attachment.charset ? `; charset=${attachment.charset}` : '') +\n                    (attachment.method ? `; method=${attachment.method}` : ''),\n                'content-transfer-encoding': 'base64',\n                'content-disposition': attachment.inline\n                    ? 'inline'\n                    : `attachment; filename=\"${mimeWordEncode(attachment.name)}\"`,\n            };\n            // allow sender to override default headers\n            if (attachment.headers != null) {\n                for (const header in attachment.headers) {\n                    headers[header.toLowerCase()] = attachment.headers[header];\n                }\n            }\n            for (const header in headers) {\n                data = data.concat([\n                    convertDashDelimitedTextToSnakeCase(header),\n                    ': ',\n                    headers[header],\n                    CRLF$1,\n                ]);\n            }\n            output(data.concat([CRLF$1]).join(''));\n        };\n        /**\n         * @param {string} data the data to output as base64\n         * @param {function(): void} [callback] the function to call after output is finished\n         * @returns {void}\n         */\n        const outputBase64 = (data, callback) => {\n            const loops = Math.ceil(data.length / MIMECHUNK);\n            let loop = 0;\n            while (loop < loops) {\n                output(data.substring(MIMECHUNK * loop, MIMECHUNK * (loop + 1)) + CRLF$1);\n                loop++;\n            }\n            if (callback) {\n                callback();\n            }\n        };\n        const outputFile = (attachment, next) => {\n            var _a;\n            const chunk = MIME64CHUNK * 16;\n            const buffer = Buffer.alloc(chunk);\n            const inputEncoding = ((_a = attachment === null || attachment === void 0 ? void 0 : attachment.headers) === null || _a === void 0 ? void 0 : _a['content-transfer-encoding']) || 'base64';\n            const encoding = inputEncoding === '7bit'\n                ? 'ascii'\n                : inputEncoding === '8bit'\n                    ? 'binary'\n                    : inputEncoding;\n            /**\n             * @param {Error} err the error to emit\n             * @param {number} fd the file descriptor\n             * @returns {void}\n             */\n            const opened = (err, fd) => {\n                if (err) {\n                    this.emit('error', err);\n                    return;\n                }\n                const readBytes = (err, bytes) => {\n                    if (err || this.readable === false) {\n                        this.emit('error', err || new Error('message stream was interrupted somehow!'));\n                        return;\n                    }\n                    // guaranteed to be encoded without padding unless it is our last read\n                    outputBase64(buffer.toString(encoding, 0, bytes), () => {\n                        if (bytes == chunk) {\n                            // we read a full chunk, there might be more\n                            read(fd, buffer, 0, chunk, null, readBytes);\n                        } // that was the last chunk, we are done reading the file\n                        else {\n                            this.removeListener('error', closeSync);\n                            close(fd, next);\n                        }\n                    });\n                };\n                read(fd, buffer, 0, chunk, null, readBytes);\n                this.once('error', closeSync);\n            };\n            open(attachment.path, 'r', opened);\n        };\n        /**\n         * @param {MessageAttachment} attachment the metadata to use as headers\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputStream = (attachment, callback) => {\n            const { stream } = attachment;\n            if (stream === null || stream === void 0 ? void 0 : stream.readable) {\n                let previous = Buffer.alloc(0);\n                stream.resume();\n                stream.on('end', () => {\n                    outputBase64(previous.toString('base64'), callback);\n                    this.removeListener('pause', stream.pause);\n                    this.removeListener('resume', stream.resume);\n                    this.removeListener('error', stream.resume);\n                });\n                stream.on('data', (buff) => {\n                    // do we have bytes from a previous stream data event?\n                    let buffer = Buffer.isBuffer(buff) ? buff : Buffer.from(buff);\n                    if (previous.byteLength > 0) {\n                        buffer = Buffer.concat([previous, buffer]);\n                    }\n                    const padded = buffer.length % MIME64CHUNK;\n                    previous = Buffer.alloc(padded);\n                    // encode as much of the buffer to base64 without empty bytes\n                    if (padded > 0) {\n                        // copy dangling bytes into previous buffer\n                        buffer.copy(previous, 0, buffer.length - padded);\n                    }\n                    outputBase64(buffer.toString('base64', 0, buffer.length - padded));\n                });\n                this.on('pause', stream.pause);\n                this.on('resume', stream.resume);\n                this.on('error', stream.resume);\n            }\n            else {\n                this.emit('error', { message: 'stream not readable' });\n            }\n        };\n        const outputAttachment = (attachment, callback) => {\n            const build = attachment.path\n                ? outputFile\n                : attachment.stream\n                    ? outputStream\n                    : outputData;\n            outputAttachmentHeaders(attachment);\n            build(attachment, callback);\n        };\n        /**\n         * @param {string} boundary the boundary text between outputs\n         * @param {MessageAttachment[]} list the list of potential messages to output\n         * @param {number} index the index of the list item to output\n         * @param {function(): void} callback the function to call if index is greater than upper bound\n         * @returns {void}\n         */\n        const outputMessage = (boundary, list, index, callback) => {\n            if (index < list.length) {\n                output(`--${boundary}${CRLF$1}`);\n                if (list[index].related) {\n                    outputRelated(list[index], () => outputMessage(boundary, list, index + 1, callback));\n                }\n                else {\n                    outputAttachment(list[index], () => outputMessage(boundary, list, index + 1, callback));\n                }\n            }\n            else {\n                output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n                callback();\n            }\n        };\n        const outputMixed = () => {\n            const boundary = generateBoundary();\n            output(`Content-Type: multipart/mixed; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n            if (this.message.alternative == null) {\n                outputText(this.message);\n                outputMessage(boundary, this.message.attachments, 0, close$1);\n            }\n            else {\n                outputAlternative(\n                // typescript bug; should narrow to { alternative: MessageAttachment }\n                this.message, () => outputMessage(boundary, this.message.attachments, 0, close$1));\n            }\n        };\n        /**\n         * @param {MessageAttachment} attachment the metadata to use as headers\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputData = (attachment, callback) => {\n            var _a, _b;\n            outputBase64(attachment.encoded\n                ? (_a = attachment.data) !== null && _a !== void 0 ? _a : ''\n                : Buffer.from((_b = attachment.data) !== null && _b !== void 0 ? _b : '').toString('base64'), callback);\n        };\n        /**\n         * @param {Message} message the message to output\n         * @returns {void}\n         */\n        const outputText = (message) => {\n            let data = [];\n            data = data.concat([\n                'Content-Type:',\n                message.content,\n                CRLF$1,\n                'Content-Transfer-Encoding: 7bit',\n                CRLF$1,\n            ]);\n            data = data.concat(['Content-Disposition: inline', CRLF$1, CRLF$1]);\n            data = data.concat([message.text || '', CRLF$1, CRLF$1]);\n            output(data.join(''));\n        };\n        /**\n         * @param {MessageAttachment} message the message to output\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputRelated = (message, callback) => {\n            const boundary = generateBoundary();\n            output(`Content-Type: multipart/related; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n            outputAttachment(message, () => {\n                var _a;\n                outputMessage(boundary, (_a = message.related) !== null && _a !== void 0 ? _a : [], 0, () => {\n                    output(`${CRLF$1}--${boundary}--${CRLF$1}${CRLF$1}`);\n                    callback();\n                });\n            });\n        };\n        /**\n         * @param {Message} message the message to output\n         * @param {function(): void} callback the function to call after output is finished\n         * @returns {void}\n         */\n        const outputAlternative = (message, callback) => {\n            const boundary = generateBoundary();\n            output(`Content-Type: multipart/alternative; boundary=\"${boundary}\"${CRLF$1}${CRLF$1}--${boundary}${CRLF$1}`);\n            outputText(message);\n            output(`--${boundary}${CRLF$1}`);\n            /**\n             * @returns {void}\n             */\n            const finish = () => {\n                output([CRLF$1, '--', boundary, '--', CRLF$1, CRLF$1].join(''));\n                callback();\n            };\n            if (message.alternative.related) {\n                outputRelated(message.alternative, finish);\n            }\n            else {\n                outputAttachment(message.alternative, finish);\n            }\n        };\n        const close$1 = (err) => {\n            var _a, _b;\n            if (err) {\n                this.emit('error', err);\n            }\n            else {\n                this.emit('data', (_b = (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.toString('utf-8', 0, this.bufferIndex)) !== null && _b !== void 0 ? _b : '');\n                this.emit('end');\n            }\n            this.buffer = null;\n            this.bufferIndex = 0;\n            this.readable = false;\n            this.removeAllListeners('resume');\n            this.removeAllListeners('pause');\n            this.removeAllListeners('error');\n            this.removeAllListeners('data');\n            this.removeAllListeners('end');\n        };\n        /**\n         * @returns {void}\n         */\n        const outputHeaderData = () => {\n            if (this.message.attachments.length || this.message.alternative) {\n                output(`MIME-Version: 1.0${CRLF$1}`);\n                outputMixed();\n            } // you only have a text message!\n            else {\n                outputText(this.message);\n                close$1();\n            }\n        };\n        /**\n         * @returns {void}\n         */\n        const outputHeader = () => {\n            let data = [];\n            for (const header in this.message.header) {\n                // do not output BCC in the headers (regex) nor custom Object.prototype functions...\n                if (!/bcc/i.test(header) &&\n                    Object.prototype.hasOwnProperty.call(this.message.header, header)) {\n                    data = data.concat([\n                        convertDashDelimitedTextToSnakeCase(header),\n                        ': ',\n                        this.message.header[header],\n                        CRLF$1,\n                    ]);\n                }\n            }\n            output(data.join(''));\n            outputHeaderData();\n        };\n        this.once('destroy', close$1);\n        process.nextTick(outputHeader);\n    }\n    /**\n     * @public\n     * pause the stream\n     * @returns {void}\n     */\n    pause() {\n        this.paused = true;\n        this.emit('pause');\n    }\n    /**\n     * @public\n     * resume the stream\n     * @returns {void}\n     */\n    resume() {\n        this.paused = false;\n        this.emit('resume');\n    }\n    /**\n     * @public\n     * destroy the stream\n     * @returns {void}\n     */\n    destroy() {\n        this.emit('destroy', this.bufferIndex > 0 ? { message: 'message stream destroyed' } : null);\n    }\n    /**\n     * @public\n     * destroy the stream at first opportunity\n     * @returns {void}\n     */\n    destroySoon() {\n        this.emit('destroy');\n    }\n}\n\n/**\n * @readonly\n * @enum\n */\nconst SMTPErrorStates = {\n    COULDNOTCONNECT: 1,\n    BADRESPONSE: 2,\n    AUTHFAILED: 3,\n    TIMEDOUT: 4,\n    ERROR: 5,\n    NOCONNECTION: 6,\n    AUTHNOTSUPPORTED: 7,\n    CONNECTIONCLOSED: 8,\n    CONNECTIONENDED: 9,\n    CONNECTIONAUTH: 10,\n};\nclass SMTPError extends Error {\n    /**\n     * @protected\n     * @param {string} message error message\n     */\n    constructor(message) {\n        super(message);\n        this.code = null;\n        this.smtp = null;\n        this.previous = null;\n    }\n    /**\n     *\n     * @param {string} message error message\n     * @param {number} code smtp error state\n     * @param {Error | null} error previous error\n     * @param {unknown} smtp arbitrary data\n     * @returns {SMTPError} error\n     */\n    static create(message, code, error, smtp) {\n        const msg = (error === null || error === void 0 ? void 0 : error.message) ? `${message} (${error.message})` : message;\n        const err = new SMTPError(msg);\n        err.code = code;\n        err.smtp = smtp;\n        if (error) {\n            err.previous = error;\n        }\n        return err;\n    }\n}\n\nclass SMTPResponseMonitor {\n    constructor(stream, timeout, onerror) {\n        let buffer = '';\n        const notify = () => {\n            var _a, _b;\n            if (buffer.length) {\n                // parse buffer for response codes\n                const line = buffer.replace('\\r', '');\n                if (!((_b = (_a = line\n                    .trim()\n                    .split(/\\n/)\n                    .pop()) === null || _a === void 0 ? void 0 : _a.match(/^(\\d{3})\\s/)) !== null && _b !== void 0 ? _b : false)) {\n                    return;\n                }\n                const match = line ? line.match(/(\\d+)\\s?(.*)/) : null;\n                const data = match !== null\n                    ? { code: match[1], message: match[2], data: line }\n                    : { code: -1, data: line };\n                stream.emit('response', null, data);\n                buffer = '';\n            }\n        };\n        const error = (err) => {\n            stream.emit('response', SMTPError.create('connection encountered an error', SMTPErrorStates.ERROR, err));\n        };\n        const timedout = (err) => {\n            stream.end();\n            stream.emit('response', SMTPError.create('timedout while connecting to smtp server', SMTPErrorStates.TIMEDOUT, err));\n        };\n        const watch = (data) => {\n            if (data !== null) {\n                buffer += data.toString();\n                notify();\n            }\n        };\n        const close = (err) => {\n            stream.emit('response', SMTPError.create('connection has closed', SMTPErrorStates.CONNECTIONCLOSED, err));\n        };\n        const end = (err) => {\n            stream.emit('response', SMTPError.create('connection has ended', SMTPErrorStates.CONNECTIONENDED, err));\n        };\n        this.stop = (err) => {\n            stream.removeAllListeners('response');\n            stream.removeListener('data', watch);\n            stream.removeListener('end', end);\n            stream.removeListener('close', close);\n            stream.removeListener('error', error);\n            if (err != null && typeof onerror === 'function') {\n                onerror(err);\n            }\n        };\n        stream.on('data', watch);\n        stream.on('end', end);\n        stream.on('close', close);\n        stream.on('error', error);\n        stream.setTimeout(timeout, timedout);\n    }\n}\n\n/**\n * @readonly\n * @enum\n */\nconst AUTH_METHODS = {\n    PLAIN: 'PLAIN',\n    'CRAM-MD5': 'CRAM-MD5',\n    LOGIN: 'LOGIN',\n    XOAUTH2: 'XOAUTH2',\n};\n/**\n * @readonly\n * @enum\n */\nconst SMTPState = {\n    NOTCONNECTED: 0,\n    CONNECTING: 1,\n    CONNECTED: 2,\n};\nconst DEFAULT_TIMEOUT = 5000;\nconst SMTP_PORT = 25;\nconst SMTP_SSL_PORT = 465;\nconst SMTP_TLS_PORT = 587;\nconst CRLF = '\\r\\n';\nconst GREYLIST_DELAY = 300;\nlet DEBUG = 0;\n/**\n * @param {...any[]} args the message(s) to log\n * @returns {void}\n */\nconst log = (...args) => {\n    if (DEBUG === 1) {\n        args.forEach((d) => console.log(typeof d === 'object'\n            ? d instanceof Error\n                ? d.message\n                : JSON.stringify(d)\n            : d));\n    }\n};\n/**\n * @param {function(...any[]): void} callback the function to call\n * @param {...any[]} args the arguments to apply to the function\n * @returns {void}\n */\nconst caller = (callback, ...args) => {\n    if (typeof callback === 'function') {\n        callback(...args);\n    }\n};\nclass SMTPConnection extends EventEmitter {\n    /**\n     * SMTP class written using python's (2.7) smtplib.py as a base.\n     *\n     * To target a Message Transfer Agent (MTA), omit all options.\n     *\n     * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n     */\n    constructor({ timeout, host, user, password, domain, port, ssl, tls, logger, authentication, } = {}) {\n        var _a;\n        super();\n        this.timeout = DEFAULT_TIMEOUT;\n        this.log = log;\n        this.authentication = [\n            AUTH_METHODS['CRAM-MD5'],\n            AUTH_METHODS.LOGIN,\n            AUTH_METHODS.PLAIN,\n            AUTH_METHODS.XOAUTH2,\n        ];\n        this._state = SMTPState.NOTCONNECTED;\n        this._secure = false;\n        this.loggedin = false;\n        this.sock = null;\n        this.features = null;\n        this.monitor = null;\n        this.domain = hostname();\n        this.host = 'localhost';\n        this.ssl = false;\n        this.tls = false;\n        this.greylistResponseTracker = new WeakSet();\n        if (Array.isArray(authentication)) {\n            this.authentication = authentication;\n        }\n        if (typeof timeout === 'number') {\n            this.timeout = timeout;\n        }\n        if (typeof domain === 'string') {\n            this.domain = domain;\n        }\n        if (typeof host === 'string') {\n            this.host = host;\n        }\n        if (ssl != null &&\n            (typeof ssl === 'boolean' ||\n                (typeof ssl === 'object' && Array.isArray(ssl) === false))) {\n            this.ssl = ssl;\n        }\n        if (tls != null &&\n            (typeof tls === 'boolean' ||\n                (typeof tls === 'object' && Array.isArray(tls) === false))) {\n            this.tls = tls;\n        }\n        this.port = port || (ssl ? SMTP_SSL_PORT : tls ? SMTP_TLS_PORT : SMTP_PORT);\n        this.loggedin = user && password ? false : true;\n        if (!user && ((_a = password === null || password === void 0 ? void 0 : password.length) !== null && _a !== void 0 ? _a : 0) > 0) {\n            throw new Error('`password` cannot be set without `user`');\n        }\n        // keep these strings hidden when quicky debugging/logging\n        this.user = () => user;\n        this.password = () => password;\n        if (typeof logger === 'function') {\n            this.log = log;\n        }\n    }\n    /**\n     * @public\n     * @param {0 | 1} level -\n     * @returns {void}\n     */\n    debug(level) {\n        DEBUG = level;\n    }\n    /**\n     * @public\n     * @returns {SMTPState} the current state\n     */\n    state() {\n        return this._state;\n    }\n    /**\n     * @public\n     * @returns {boolean} whether or not the instance is authorized\n     */\n    authorized() {\n        return this.loggedin;\n    }\n    /**\n     * Establish an SMTP connection.\n     *\n     * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n     *\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {number} [port] the port to use for the connection\n     * @param {string} [host] the hostname to use for the connection\n     * @param {ConnectOptions} [options={}] the options\n     * @returns {void}\n     */\n    connect(callback, port = this.port, host = this.host, options = {}) {\n        this.port = port;\n        this.host = host;\n        this.ssl = options.ssl || this.ssl;\n        if (this._state !== SMTPState.NOTCONNECTED) {\n            this.quit(() => this.connect(callback, port, host, options));\n        }\n        /**\n         * @returns {void}\n         */\n        const connected = () => {\n            this.log(`connected: ${this.host}:${this.port}`);\n            if (this.ssl && !this.tls) {\n                // if key/ca/cert was passed in, check if connection is authorized\n                if (typeof this.ssl !== 'boolean' &&\n                    this.sock instanceof TLSSocket &&\n                    !this.sock.authorized) {\n                    this.close(true);\n                    caller(callback, SMTPError.create('could not establish an ssl connection', SMTPErrorStates.CONNECTIONAUTH));\n                }\n                else {\n                    this._secure = true;\n                }\n            }\n        };\n        /**\n         * @param {Error} err err\n         * @returns {void}\n         */\n        const connectedErrBack = (err) => {\n            if (!err) {\n                connected();\n            }\n            else {\n                this.close(true);\n                this.log(err);\n                caller(callback, SMTPError.create('could not connect', SMTPErrorStates.COULDNOTCONNECT, err));\n            }\n        };\n        const response = (err, msg) => {\n            if (err) {\n                if (this._state === SMTPState.NOTCONNECTED && !this.sock) {\n                    return;\n                }\n                this.close(true);\n                caller(callback, err);\n            }\n            else if (msg.code == '220') {\n                this.log(msg.data);\n                // might happen first, so no need to wait on connected()\n                this._state = SMTPState.CONNECTED;\n                caller(callback, null, msg.data);\n            }\n            else {\n                this.log(`response (data): ${msg.data}`);\n                this.quit(() => {\n                    caller(callback, SMTPError.create('bad response on connection', SMTPErrorStates.BADRESPONSE, err, msg.data));\n                });\n            }\n        };\n        this._state = SMTPState.CONNECTING;\n        this.log(`connecting: ${this.host}:${this.port}`);\n        if (this.ssl) {\n            this.sock = connect(this.port, this.host.trim(), typeof this.ssl === 'object' ? this.ssl : {}, connected);\n        }\n        else {\n            this.sock = new Socket();\n            this.sock.connect(this.port, this.host.trim(), connectedErrBack);\n        }\n        this.monitor = new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n        this.sock.once('response', response);\n        this.sock.once('error', response); // the socket could reset or throw, so let's handle it and let the user know\n    }\n    /**\n     * @public\n     * @param {string} str the string to send\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    send(str, callback) {\n        if (this.sock != null && this._state === SMTPState.CONNECTED) {\n            this.log(str);\n            this.sock.once('response', (err, msg) => {\n                if (err) {\n                    caller(callback, err);\n                }\n                else {\n                    this.log(msg.data);\n                    caller(callback, null, msg);\n                }\n            });\n            if (this.sock.writable) {\n                this.sock.write(str);\n            }\n        }\n        else {\n            this.close(true);\n            caller(callback, SMTPError.create('no connection has been established', SMTPErrorStates.NOCONNECTION));\n        }\n    }\n    /**\n     * @public\n     * @param {string} cmd command to issue\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {(number[] | number)} [codes=[250]] array codes\n     * @returns {void}\n     */\n    command(cmd, callback, codes = [250]) {\n        const codesArray = Array.isArray(codes)\n            ? codes\n            : typeof codes === 'number'\n                ? [codes]\n                : [250];\n        const response = (err, msg) => {\n            if (err) {\n                caller(callback, err);\n            }\n            else {\n                const code = Number(msg.code);\n                if (codesArray.indexOf(code) !== -1) {\n                    caller(callback, err, msg.data, msg.message);\n                }\n                else if ((code === 450 || code === 451) &&\n                    msg.message.toLowerCase().includes('greylist') &&\n                    this.greylistResponseTracker.has(response) === false) {\n                    this.greylistResponseTracker.add(response);\n                    setTimeout(() => {\n                        this.send(cmd + CRLF, response);\n                    }, GREYLIST_DELAY);\n                }\n                else {\n                    const suffix = msg.message ? `: ${msg.message}` : '';\n                    const errorMessage = `bad response on command '${cmd.split(' ')[0]}'${suffix}`;\n                    caller(callback, SMTPError.create(errorMessage, SMTPErrorStates.BADRESPONSE, null, msg.data));\n                }\n            }\n        };\n        this.greylistResponseTracker.delete(response);\n        this.send(cmd + CRLF, response);\n    }\n    /**\n     * @public\n     * @description SMTP 'helo' command.\n     *\n     * Hostname to send for self command defaults to the FQDN of the local\n     * host.\n     *\n     * As this command was deprecated by rfc2821, it should only be used for compatibility with non-compliant servers.\n     * @see https://tools.ietf.org/html/rfc2821#appendix-F.3\n     *\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} domain the domain to associate with the 'helo' request\n     * @returns {void}\n     */\n    helo(callback, domain) {\n        this.command(`helo ${domain || this.domain}`, (err, data) => {\n            if (err) {\n                caller(callback, err);\n            }\n            else {\n                this.parse_smtp_features(data);\n                caller(callback, err, data);\n            }\n        });\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    starttls(callback) {\n        const response = (err, msg) => {\n            if (this.sock == null) {\n                throw new Error('null socket');\n            }\n            if (err) {\n                err.message += ' while establishing a starttls session';\n                caller(callback, err);\n            }\n            else {\n                const secureContext = createSecureContext(typeof this.tls === 'object' ? this.tls : {});\n                const secureSocket = new TLSSocket(this.sock, { secureContext });\n                secureSocket.on('error', (err) => {\n                    this.close(true);\n                    caller(callback, err);\n                });\n                this._secure = true;\n                this.sock = secureSocket;\n                new SMTPResponseMonitor(this.sock, this.timeout, () => this.close(true));\n                caller(callback, msg.data);\n            }\n        };\n        this.command('starttls', response, [220]);\n    }\n    /**\n     * @public\n     * @param {string} data the string to parse for features\n     * @returns {void}\n     */\n    parse_smtp_features(data) {\n        //  According to RFC1869 some (badly written)\n        //  MTA's will disconnect on an ehlo. Toss an exception if\n        //  that happens -ddm\n        data.split('\\n').forEach((ext) => {\n            const parse = ext.match(/^(?:\\d+[-=]?)\\s*?([^\\s]+)(?:\\s+(.*)\\s*?)?$/);\n            // To be able to communicate with as many SMTP servers as possible,\n            // we have to take the old-style auth advertisement into account,\n            // because:\n            // 1) Else our SMTP feature parser gets confused.\n            // 2) There are some servers that only advertise the auth methods we\n            // support using the old style.\n            if (parse != null && this.features != null) {\n                // RFC 1869 requires a space between ehlo keyword and parameters.\n                // It's actually stricter, in that only spaces are allowed between\n                // parameters, but were not going to check for that here.  Note\n                // that the space isn't present if there are no parameters.\n                this.features[parse[1].toLowerCase()] = parse[2] || true;\n            }\n        });\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} domain the domain to associate with the 'ehlo' request\n     * @returns {void}\n     */\n    ehlo(callback, domain) {\n        this.features = {};\n        this.command(`ehlo ${domain || this.domain}`, (err, data) => {\n            if (err) {\n                caller(callback, err);\n            }\n            else {\n                this.parse_smtp_features(data);\n                if (this.tls && !this._secure) {\n                    this.starttls(() => this.ehlo(callback, domain));\n                }\n                else {\n                    caller(callback, err, data);\n                }\n            }\n        });\n    }\n    /**\n     * @public\n     * @param {string} opt the features keyname to check\n     * @returns {boolean} whether the extension exists\n     */\n    has_extn(opt) {\n        var _a;\n        return ((_a = this.features) !== null && _a !== void 0 ? _a : {})[opt.toLowerCase()] === undefined;\n    }\n    /**\n     * @public\n     * @description SMTP 'help' command, returns text from the server\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} domain the domain to associate with the 'help' request\n     * @returns {void}\n     */\n    help(callback, domain) {\n        this.command(domain ? `help ${domain}` : 'help', callback, [211, 214]);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    rset(callback) {\n        this.command('rset', callback);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    noop(callback) {\n        this.send('noop', callback);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} from the sender\n     * @returns {void}\n     */\n    mail(callback, from) {\n        this.command(`mail FROM:${from}`, callback);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} to the receiver\n     * @returns {void}\n     */\n    rcpt(callback, to) {\n        this.command(`RCPT TO:${to}`, callback, [250, 251]);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    data(callback) {\n        this.command('data', callback, [354]);\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    data_end(callback) {\n        this.command(`${CRLF}.`, callback);\n    }\n    /**\n     * @public\n     * @param {string} data the message to send\n     * @returns {void}\n     */\n    message(data) {\n        var _a, _b;\n        this.log(data);\n        (_b = (_a = this.sock) === null || _a === void 0 ? void 0 : _a.write(data)) !== null && _b !== void 0 ? _b : this.log('no socket to write to');\n    }\n    /**\n     * @public\n     * @description SMTP 'verify' command -- checks for address validity.\n     * @param {string} address the address to validate\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    verify(address, callback) {\n        this.command(`vrfy ${address}`, callback, [250, 251, 252]);\n    }\n    /**\n     * @public\n     * @description SMTP 'expn' command -- expands a mailing list.\n     * @param {string} address the mailing list to expand\n     * @param {function(...any[]): void} callback function to call after response\n     * @returns {void}\n     */\n    expn(address, callback) {\n        this.command(`expn ${address}`, callback);\n    }\n    /**\n     * @public\n     * @description Calls this.ehlo() and, if an error occurs, this.helo().\n     *\n     * If there has been no previous EHLO or HELO command self session, self\n     * method tries ESMTP EHLO first.\n     *\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} [domain] the domain to associate with the command\n     * @returns {void}\n     */\n    ehlo_or_helo_if_needed(callback, domain) {\n        // is this code callable...?\n        if (!this.features) {\n            const response = (err, data) => caller(callback, err, data);\n            this.ehlo((err, data) => {\n                if (err) {\n                    this.helo(response, domain);\n                }\n                else {\n                    caller(callback, err, data);\n                }\n            }, domain);\n        }\n    }\n    /**\n     * @public\n     *\n     * Log in on an SMTP server that requires authentication.\n     *\n     * If there has been no previous EHLO or HELO command self session, self\n     * method tries ESMTP EHLO first.\n     *\n     * This method will return normally if the authentication was successful.\n     *\n     * @param {function(...any[]): void} callback function to call after response\n     * @param {string} [user] the username to authenticate with\n     * @param {string} [password] the password for the authentication\n     * @param {{ method: string, domain: string }} [options] login options\n     * @returns {void}\n     */\n    login(callback, user, password, options = {}) {\n        var _a, _b;\n        const login = {\n            user: user ? () => user : this.user,\n            password: password ? () => password : this.password,\n            method: (_b = (_a = options === null || options === void 0 ? void 0 : options.method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : '',\n        };\n        const domain = (options === null || options === void 0 ? void 0 : options.domain) || this.domain;\n        const initiate = (err, data) => {\n            var _a;\n            if (err) {\n                caller(callback, err);\n                return;\n            }\n            let method = null;\n            /**\n             * @param {string} challenge challenge\n             * @returns {string} base64 cram hash\n             */\n            const encodeCramMd5 = (challenge) => {\n                const hmac = createHmac('md5', login.password());\n                hmac.update(Buffer.from(challenge, 'base64').toString('ascii'));\n                return Buffer.from(`${login.user()} ${hmac.digest('hex')}`).toString('base64');\n            };\n            /**\n             * @returns {string} base64 login/password\n             */\n            const encodePlain = () => Buffer.from(`\\u0000${login.user()}\\u0000${login.password()}`).toString('base64');\n            /**\n             * @see https://developers.google.com/gmail/xoauth2_protocol\n             * @returns {string} base64 xoauth2 auth token\n             */\n            const encodeXoauth2 = () => Buffer.from(`user=${login.user()}\\u0001auth=Bearer ${login.password()}\\u0001\\u0001`).toString('base64');\n            // List of authentication methods we support: from preferred to\n            // less preferred methods.\n            if (!method) {\n                const preferred = this.authentication;\n                let auth = '';\n                if (typeof ((_a = this.features) === null || _a === void 0 ? void 0 : _a['auth']) === 'string') {\n                    auth = this.features['auth'];\n                }\n                for (let i = 0; i < preferred.length; i++) {\n                    if (auth.includes(preferred[i])) {\n                        method = preferred[i];\n                        break;\n                    }\n                }\n            }\n            /**\n             * handle bad responses from command differently\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @returns {void}\n             */\n            const failed = (err, data) => {\n                this.loggedin = false;\n                this.close(); // if auth is bad, close the connection, it won't get better by itself\n                caller(callback, SMTPError.create('authorization.failed', SMTPErrorStates.AUTHFAILED, err, data));\n            };\n            /**\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @returns {void}\n             */\n            const response = (err, data) => {\n                if (err) {\n                    failed(err, data);\n                }\n                else {\n                    this.loggedin = true;\n                    caller(callback, err, data);\n                }\n            };\n            /**\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @param {string} msg msg\n             * @returns {void}\n             */\n            const attempt = (err, data, msg) => {\n                if (err) {\n                    failed(err, data);\n                }\n                else {\n                    if (method === AUTH_METHODS['CRAM-MD5']) {\n                        this.command(encodeCramMd5(msg), response, [235, 503]);\n                    }\n                    else if (method === AUTH_METHODS.LOGIN) {\n                        this.command(Buffer.from(login.password()).toString('base64'), response, [235, 503]);\n                    }\n                }\n            };\n            /**\n             * @param {Error} err err\n             * @param {unknown} data data\n             * @param {string} msg msg\n             * @returns {void}\n             */\n            const attemptUser = (err, data) => {\n                if (err) {\n                    failed(err, data);\n                }\n                else {\n                    if (method === AUTH_METHODS.LOGIN) {\n                        this.command(Buffer.from(login.user()).toString('base64'), attempt, [334]);\n                    }\n                }\n            };\n            switch (method) {\n                case AUTH_METHODS['CRAM-MD5']:\n                    this.command(`AUTH  ${AUTH_METHODS['CRAM-MD5']}`, attempt, [334]);\n                    break;\n                case AUTH_METHODS.LOGIN:\n                    this.command(`AUTH ${AUTH_METHODS.LOGIN}`, attemptUser, [334]);\n                    break;\n                case AUTH_METHODS.PLAIN:\n                    this.command(`AUTH ${AUTH_METHODS.PLAIN} ${encodePlain()}`, response, [235, 503]);\n                    break;\n                case AUTH_METHODS.XOAUTH2:\n                    this.command(`AUTH ${AUTH_METHODS.XOAUTH2} ${encodeXoauth2()}`, response, [235, 503]);\n                    break;\n                default:\n                    caller(callback, SMTPError.create('no form of authorization supported', SMTPErrorStates.AUTHNOTSUPPORTED, null, data));\n                    break;\n            }\n        };\n        this.ehlo_or_helo_if_needed(initiate, domain);\n    }\n    /**\n     * @public\n     * @param {boolean} [force=false] whether or not to force destroy the connection\n     * @returns {void}\n     */\n    close(force = false) {\n        if (this.sock) {\n            if (force) {\n                this.log('smtp connection destroyed!');\n                this.sock.destroy();\n            }\n            else {\n                this.log('smtp connection closed.');\n                this.sock.end();\n            }\n        }\n        if (this.monitor) {\n            this.monitor.stop();\n            this.monitor = null;\n        }\n        this._state = SMTPState.NOTCONNECTED;\n        this._secure = false;\n        this.sock = null;\n        this.features = null;\n        this.loggedin = !(this.user() && this.password());\n    }\n    /**\n     * @public\n     * @param {function(...any[]): void} [callback] function to call after response\n     * @returns {void}\n     */\n    quit(callback) {\n        this.command('quit', (err, data) => {\n            caller(callback, err, data);\n            this.close();\n        }, [221, 250]);\n    }\n}\n\nclass SMTPClient {\n    /**\n     * Create a standard SMTP client backed by a self-managed SMTP connection.\n     *\n     * NOTE: `host` is trimmed before being used to establish a connection; however, the original untrimmed value will still be visible in configuration.\n     *\n     * @param {SMTPConnectionOptions} server smtp options\n     */\n    constructor(server) {\n        this.queue = [];\n        this.sending = false;\n        this.ready = false;\n        this.timer = null;\n        this.smtp = new SMTPConnection(server);\n    }\n    /**\n     * @public\n     * @template {Message | MessageHeaders} T\n     * @param {T} msg the message to send\n     * @param {MessageCallback<T>} callback receiver for the error (if any) as well as the passed-in message / headers\n     * @returns {void}\n     */\n    send(msg, callback) {\n        const message = msg instanceof Message\n            ? msg\n            : this._canMakeMessage(msg)\n                ? new Message(msg)\n                : null;\n        if (message == null) {\n            callback(new Error('message is not a valid Message instance'), msg);\n            return;\n        }\n        const { isValid, validationError } = message.checkValidity();\n        if (isValid) {\n            const stack = this.createMessageStack(message, callback);\n            if (stack.to.length === 0) {\n                return callback(new Error('No recipients found in message'), msg);\n            }\n            this.queue.push(stack);\n            this._poll();\n        }\n        else {\n            callback(new Error(validationError), msg);\n        }\n    }\n    /**\n     * @public\n     * @template {Message | MessageHeaders} T\n     * @param {T} msg the message to send\n     * @returns {Promise<T>} a promise that resolves to the passed-in message / headers\n     */\n    sendAsync(msg) {\n        return new Promise((resolve, reject) => {\n            this.send(msg, (err, message) => {\n                if (err != null) {\n                    reject(err);\n                }\n                else {\n                    // unfortunately, the conditional type doesn't reach here\n                    // fortunately, we only return a `Message` when err is null, so this is safe\n                    resolve(message);\n                }\n            });\n        });\n    }\n    /**\n     * @public\n     * @description Converts a message to the raw object used by the internal stack.\n     * @param {Message} message message to convert\n     * @param {MessageCallback} callback errback\n     * @returns {MessageStack} raw message object\n     */\n    createMessageStack(message, callback = function () {\n        /* ø */\n    }) {\n        const [{ address: from }] = addressparser(message.header.from);\n        const stack = {\n            message,\n            to: [],\n            from,\n            callback: callback.bind(this),\n        };\n        const { header: { to, cc, bcc, 'return-path': returnPath }, } = message;\n        if ((typeof to === 'string' || Array.isArray(to)) && to.length > 0) {\n            stack.to = addressparser(to);\n        }\n        if ((typeof cc === 'string' || Array.isArray(cc)) && cc.length > 0) {\n            stack.to = stack.to.concat(addressparser(cc).filter((x) => stack.to.some((y) => y.address === x.address) === false));\n        }\n        if ((typeof bcc === 'string' || Array.isArray(bcc)) && bcc.length > 0) {\n            stack.to = stack.to.concat(addressparser(bcc).filter((x) => stack.to.some((y) => y.address === x.address) === false));\n        }\n        if (typeof returnPath === 'string' && returnPath.length > 0) {\n            const parsedReturnPath = addressparser(returnPath);\n            if (parsedReturnPath.length > 0) {\n                const [{ address: returnPathAddress }] = parsedReturnPath;\n                stack.returnPath = returnPathAddress;\n            }\n        }\n        return stack;\n    }\n    /**\n     * @protected\n     * @returns {void}\n     */\n    _poll() {\n        if (this.timer != null) {\n            clearTimeout(this.timer);\n        }\n        if (this.queue.length) {\n            if (this.smtp.state() == SMTPState.NOTCONNECTED) {\n                this._connect(this.queue[0]);\n            }\n            else if (this.smtp.state() == SMTPState.CONNECTED &&\n                !this.sending &&\n                this.ready) {\n                this._sendmail(this.queue.shift());\n            }\n        }\n        // wait around 1 seconds in case something does come in,\n        // otherwise close out SMTP connection if still open\n        else if (this.smtp.state() == SMTPState.CONNECTED) {\n            this.timer = setTimeout(() => this.smtp.quit(), 1000);\n        }\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _connect(stack) {\n        /**\n         * @param {Error} err callback error\n         * @returns {void}\n         */\n        const connect = (err) => {\n            if (!err) {\n                const begin = (err) => {\n                    if (!err) {\n                        this.ready = true;\n                        this._poll();\n                    }\n                    else {\n                        stack.callback(err, stack.message);\n                        // clear out the queue so all callbacks can be called with the same error message\n                        this.queue.shift();\n                        this._poll();\n                    }\n                };\n                if (!this.smtp.authorized()) {\n                    this.smtp.login(begin);\n                }\n                else {\n                    this.smtp.ehlo_or_helo_if_needed(begin);\n                }\n            }\n            else {\n                stack.callback(err, stack.message);\n                // clear out the queue so all callbacks can be called with the same error message\n                this.queue.shift();\n                this._poll();\n            }\n        };\n        this.ready = false;\n        this.smtp.connect(connect);\n    }\n    /**\n     * @protected\n     * @param {MessageStack} msg message stack\n     * @returns {boolean} can make message\n     */\n    _canMakeMessage(msg) {\n        return (msg.from &&\n            (msg.to || msg.cc || msg.bcc) &&\n            (msg.text !== undefined || this._containsInlinedHtml(msg.attachment)));\n    }\n    /**\n     * @protected\n     * @param {MessageAttachment | MessageAttachment[]} attachment attachment\n     * @returns {boolean} whether the attachment contains inlined html\n     */\n    _containsInlinedHtml(attachment) {\n        if (Array.isArray(attachment)) {\n            return attachment.some((att) => {\n                return this._isAttachmentInlinedHtml(att);\n            });\n        }\n        else {\n            return this._isAttachmentInlinedHtml(attachment);\n        }\n    }\n    /**\n     * @protected\n     * @param {MessageAttachment} attachment attachment\n     * @returns {boolean} whether the attachment is inlined html\n     */\n    _isAttachmentInlinedHtml(attachment) {\n        return (attachment &&\n            (attachment.data || attachment.path) &&\n            attachment.alternative === true);\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @param {function(MessageStack): void} next next\n     * @returns {function(Error): void} callback\n     */\n    _sendsmtp(stack, next) {\n        /**\n         * @param {Error} [err] error\n         * @returns {void}\n         */\n        return (err) => {\n            if (!err && next) {\n                next.apply(this, [stack]);\n            }\n            else {\n                // if we snag on SMTP commands, call done, passing the error\n                // but first reset SMTP state so queue can continue polling\n                this.smtp.rset(() => this._senddone(err, stack));\n            }\n        };\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _sendmail(stack) {\n        const from = stack.returnPath || stack.from;\n        this.sending = true;\n        this.smtp.mail(this._sendsmtp(stack, this._sendrcpt), '<' + from + '>');\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _sendrcpt(stack) {\n        var _a;\n        if (stack.to == null || typeof stack.to === 'string') {\n            throw new TypeError('stack.to must be array');\n        }\n        const to = (_a = stack.to.shift()) === null || _a === void 0 ? void 0 : _a.address;\n        this.smtp.rcpt(this._sendsmtp(stack, stack.to.length ? this._sendrcpt : this._senddata), `<${to}>`);\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _senddata(stack) {\n        this.smtp.data(this._sendsmtp(stack, this._sendmessage));\n    }\n    /**\n     * @protected\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _sendmessage(stack) {\n        const stream = stack.message.stream();\n        stream.on('data', (data) => this.smtp.message(data));\n        stream.on('end', () => {\n            this.smtp.data_end(this._sendsmtp(stack, () => this._senddone(null, stack)));\n        });\n        // there is no way to cancel a message while in the DATA portion,\n        // so we have to close the socket to prevent a bad email from going out\n        stream.on('error', (err) => {\n            this.smtp.close();\n            this._senddone(err, stack);\n        });\n    }\n    /**\n     * @protected\n     * @param {Error} err err\n     * @param {MessageStack} stack stack\n     * @returns {void}\n     */\n    _senddone(err, stack) {\n        this.sending = false;\n        stack.callback(err, stack.message);\n        this._poll();\n    }\n}\n\nexport { AUTH_METHODS, BUFFERSIZE, DEFAULT_TIMEOUT, MIME64CHUNK, MIMECHUNK, Message, SMTPClient, SMTPConnection, SMTPError, SMTPErrorStates, SMTPResponseMonitor, SMTPState, addressparser, getRFC2822Date, getRFC2822DateUTC, isRFC2822Date, mimeEncode, mimeWordEncode };\n//# sourceMappingURL=email.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}